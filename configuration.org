#+TITLE: Emacs Configuration
#+AUTHOR: Samarth Kishor
#+OPTIONS: toc:nil num:nil

* Use =use-package=

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
          (package-refresh-contents)
          (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (eval-when-compile
      (require 'use-package))
#+END_SRC

* Personal Information

Name and email.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Samarth Kishor"
        user-mail-address "samarthkishor1@gmail.com")
#+END_SRC

* =evil-mode=

Don't expand abbreviations when I hit escape.

#+BEGIN_SRC emacs-lisp
  (setq evil-want-abbrev-expand-on-insert-exit nil)
#+END_SRC

Use =evil=.

#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
#+END_SRC

Enable =M-x= in evil-mode.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'execute-extended-command)
#+END_SRC

Bind =C-p= to fuzzy-finding files in the current project.

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
#+END_SRC

Scroll by visual line.

#+BEGIN_SRC emacs-lisp
  (evil-define-key nil evil-normal-state-map
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line)
#+END_SRC

Change sentence (marked by a period) ending from one space to two spaces. This mostly fixes evil-mode sentence motions.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
  (define-key evil-normal-state-map ")" 'forward-sentence)
#+END_SRC

Use =evil-leader= to emulate leader key functionality. Set , as the leader key.

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :commands (evil-leader-mode)
    :ensure evil-leader
    :demand evil-leader
    :init
    (setq evil-leader/in-all-states 1)
    (global-evil-leader-mode)
    :config
    (evil-leader/set-leader ","))
#+End_SRC

Use =evil-surround= to emulate =surround.vim=.

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC

* UI Preferences
** Tweak window settings

Hide the scroll, tool, and menu bars. hello world.

#+BEGIN_SRC emacs-lisp
  (if window-system (scroll-bar-mode -1))
  (tool-bar-mode 0)
  (menu-bar-mode 0)
#+END_SRC

Start in full-screen.

#+BEGIN_SRC emacs-lisp
  (if (eq window-system 'ns)
      (toggle-frame-maximized)
    (toggle-frame-fullscreen))
#+END_SRC

Set the theme as a "safe theme".

#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
#+END_SRC
** Remove startup screen

It gets annoying after a while.

#+BEGIN_SRC emacs-lisp
  (setq-default inhibit-startup-screen t)
#+END_SRC

** Mode line

Display the time in the mode-line.

#+BEGIN_SRC emacs-lisp
  (display-time-mode t)

  ;; Time format
  (customize-set-variable 'display-time-string-forms
                          '((propertize (concat dayname
                                                " " 12-hours ":" minutes " " (upcase am-pm))
                                        'help-echo (format-time-string "%a, %b %e %Y" now))))

  ;; Update display-time-string
  (display-time-update)
#+END_SRC

Use =telephone-line= for the mode-line.

#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :config
    (setq telephone-line-primary-left-separator 'telephone-line-utf-abs-left
          telephone-line-secondary-left-separator 'telephone-line-utf-abs-hollow-left
          telephone-line-primary-right-separator 'telephone-line-utf-abs-right
          telephone-line-secondary-right-separator 'telephone-line-utf-abs-hollow-right)
    (setq telephone-line-height 24
          telephone-line-evil-use-short-tag t)

    (setq telephone-line-lhs
          '((evil   . (telephone-line-evil-tag-segment))
            (accent . (telephone-line-airline-position-segment
                       telephone-line-process-segment))
            (nil    . (telephone-line-minor-mode-segment
                       telephone-line-buffer-segment))))
    (setq telephone-line-rhs
          '((nil    . (telephone-line-misc-info-segment))
            (evil   . (telephone-line-vc-segment))
            (accent . (telephone-line-major-mode-segment
                       telephone-line-flycheck-segment))))

    (telephone-line-mode t))
#+END_SRC

Configure the mode-line.
Source: [[https://github.com/xiongtx/.emacs.d/blob/347d9990a394fbcb222e4cda9759743e17b1977a/init.org#mode-line][A helpful person]]
[disabled]

#+BEGIN_SRC emacs-lisp
  ;; ;; Remove display-time-string from global-mode-string
  ;; (setq global-mode-string (delq 'display-time-string global-mode-string))

  ;; ;; Remove battery-mode-line-string from global-mode-string
  ;; (setq global-mode-string (delq 'battery-mode-line-string global-mode-string))

  ;; (defun *-mode-line-fill (reserve)
  ;;   "Return empty space using FACE and leaving RESERVE space on the right."
  ;;   (unless reserve
  ;;     (setq reserve 20))
  ;;   (when (and window-system
  ;;              (eq 'right (get-scroll-bar-mode)))
  ;;     (setq reserve (- reserve 3)))
  ;;   (propertize " "
  ;;               'display `((space :align-to (- (+ right right-fringe right-margin), reserve)))))

  ;; (setq-default mode-line-format
  ;;               '("%e"
  ;;                 mode-line-front-space
  ;;                 mode-line-client
  ;;                 mode-line-remote
  ;;                 mode-line-mule-info
  ;;                 mode-line-modified
  ;;                 "  "
  ;;                 ;; Buffer name
  ;;                 (:propertize mode-line-buffer-identification
  ;;                              face font-lock-builtin-face)
  ;;                 "  "
  ;;                 ;; Position
  ;;                 "%p (%l,%c)"
  ;;                 "  "
  ;;                 ;; Mode, recursive editing, and narrowing information
  ;;                 "("
  ;;                 (:propertize "%["
  ;;                              face font-lock-warning-face)
  ;;                 mode-name
  ;;                 (:propertize "%]"
  ;;                              face font-lock-warning-face)
  ;;                 (:eval (if (buffer-narrowed-p)
  ;;                            (concat " "
  ;;                                    (propertize "Narrow"
  ;;                                                'face 'font-lock-warning-face))))
  ;;                 ")"
  ;;                 ;; Version control
  ;;                 (:eval (when vc-mode
  ;;                          (concat " "
  ;;                                  vc-mode)))
  ;;                 ;; Miscellaneous information
  ;;                 "  "
  ;;                 mode-line-misc-info
  ;;                 (:eval (*-mode-line-fill (+ (length battery-mode-line-string)
  ;;                                             1
  ;;                                             (length display-time-string))))
  ;;                 battery-mode-line-string
  ;;                 " "
  ;;                 display-time-string
  ;;                 mode-line-end-spaces))

#+End_SRC

Configure the mode-line and use =all-the-icons= for some git branch eye-candy.
I didn't want to include any evil mode status indicators to keep things clean.
[disabled]

#+BEGIN_SRC emacs-lisp
  ;; (use-package all-the-icons
  ;;   :demand
  ;;   :init
  ;;   (progn (defun -custom-modeline-github-vc ()
  ;;            (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
  ;;              (concat
  ;;               (propertize (format " %s" (all-the-icons-octicon "git-branch"))
  ;;                           'face `(:height 1 :family ,(all-the-icons-octicon-family))
  ;;                           'display '(raise 0))
  ;;               (propertize (format " %s" branch))
  ;;               (propertize "  "))))

  ;;          (defun -custom-modeline-svn-vc ()
  ;;            (let ((revision (cadr (split-string vc-mode "-"))))
  ;;              (concat
  ;;               (propertize (format " %s" (all-the-icons-faicon "cloud"))
  ;;                           'face `(:height 1)
  ;;                           'display '(raise 0))
  ;;               (propertize (format " %s" revision) 'face `(:height 0.9)))))

  ;;          (defvar mode-line-my-vc
  ;;            '(:propertize
  ;;              (:eval (when vc-mode
  ;;                       (cond
  ;;                        ((string-match "Git[:-]" vc-mode) (-custom-modeline-github-vc))
  ;;                        ((string-match "SVN-" vc-mode) (-custom-modeline-svn-vc))
  ;;                        (t (format "%s" vc-mode)))))
  ;;              face mode-line-directory)
  ;;            "Formats the current directory's git information in the modeline."))
  ;;   :config
  ;;   (progn
  ;;     (setq-default mode-line-format
  ;;                   (list
  ;;                    "("
  ;;                    "%02l" "," "%02c"
  ;;                    ") "
  ;;                    mode-line-front-space
  ;;                    " "
  ;;                    mode-line-mule-info
  ;;                    mode-line-modified
  ;;                    mode-line-frame-identification
  ;;                    mode-line-buffer-identification
  ;;                    " %6 "
  ;;                    mode-line-modes
  ;;                    mode-line-my-vc
  ;;                    '("  " battery-mode-line-string "  " display-time-string)
  ;;                    ))
  ;;     (concat evil-mode-line-tag)))
#+END_SRC


Get rid of clutter using =diminish=.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
      :ensure t
      :init
      (diminish 'undo-tree-mode)
      (diminish 'auto-revert-mode)
      (diminish 'global-auto-revert-mode)
      (diminish 'flyspell-mode))
#+END_SRC

Don't display the system load average.

#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil)
#+END_SRC

** Disable the bell

#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

Flash the mode-line instead.
Source: [[http://www.stefanom.org/prettify-my-emacs-symbols/]]

#+BEGIN_SRC emacs-lisp
  (defun my-terminal-visible-bell ()
     "A friendlier visual bell effect."
     (invert-face 'mode-line)
     (run-with-timer 0.1 nil 'invert-face 'mode-line))
 
   (setq visible-bell nil
         ring-bell-function 'my-terminal-visible-bell)
#+END_SRC

** Set the font to Fira Code

It's the best.

#+BEGIN_SRC emacs-lisp
  (when (window-system)
    (set-frame-font "Fira Code 14" nil t))
#+END_SRC

Enable ligatures.

#+BEGIN_SRC emacs-lisp
  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                 (36 . ".\\(?:>\\)")
                 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                 (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                 (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                 (48 . ".\\(?:x[a-zA-Z]\\)")
                 (58 . ".\\(?:::\\|[:=]\\)")
                 (59 . ".\\(?:;;\\|;\\)")
                 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                 (91 . ".\\(?:]\\)")
                 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                 (94 . ".\\(?:=\\)")
                 (119 . ".\\(?:ww\\)")
                 (123 . ".\\(?:-\\)")
                 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
                 )
               ))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

** Line settings

Highlight the current line.

#+BEGIN_SRC emacs-lisp
  (when window-system
        (global-hl-line-mode))
#+END_SRC

Show fringe indicators as curly arrows.

#+BEGIN_SRC emacs-lisp
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

Indicate empty lines.

#+BEGIN_SRC emacs-lisp
  (setq-default indicate-empty-lines t)
#+END_SRC

* Programming Environments
** General settings

Add =homebrew= to Emacs path.

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC

Don't use backup files.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

Use UTF-8 encoding everywhere.

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

Indent by two spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
#+END_SRC

Automatically indent with the return key.

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

Show parenthesis highlighting.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Add column numbers to the bottom bar.

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC

Follow symlinks.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

** Magit

Bring up the status menu with =C-x g=.

Use =evil= keybindings.

Highlight commit text in the summary that goes over 50 characters.

Enable spellchecking when writing commit messages.

Start in insert mode when writing a commit message.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    (use-package evil-magit)
    (setq git-commit-summary-max-length 50)
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC

** Auto-complete

Use =company= for auto-completion engine.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :bind (:map company-active-map
                ("M-j" . company-select-next)
                ("M-k" . company-select-previous))
    :init
    (global-company-mode t))
#+END_SRC

** Dafny

First, install the =boogie-friends= package.
Indicate the paths to the Dafny and Boogie installations.

#+BEGIN_SRC emacs-lisp
  (setq dafny-verification-backend 'server)
  (setq flycheck-dafny-executable "/Users/samarth/dafny/dafny")
  (setq flycheck-boogie-executable "/Users/samarth/dafny/dafny-server")
  (setq flycheck-z3-smt2-executable "/Users/samarth/dafny/z3/bin/z3")
  (setq flycheck-inferior-dafny-executable "/Users/samarth/dafny/dafny-server") ;; Optional
  ;; (setq boogie-friends-profile-analyzer-executable "PATH-TO-Z3-AXIOM-PROFILER") ;; Optional
#+END_SRC

** JavaScript

Use =prettier-mode= for code formatting.
Make sure =prettier= is installed globally.

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :hook
    (js2-mode . prettier-js-mode))
#+END_SRC

* Org-mode
** Display Preferences

Use bullets instead of asterisks.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

Use a little downward-pointing arrow instead of the usual ellipsis that org displays when there’s stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Enable spellchecking in org-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

Don't change the font height of headers.

#+BEGIN_SRC emacs-lisp
  (defun my/org-mode-hook ()
    (dolist (face '(org-level-1
                    org-level-2
                    org-level-3
                    org-level-4
                    org-level-5))
      (set-face-attribute face nil :weight 'semi-bold :height 1.1)))

  (add-hook 'org-mode-hook 'my/org-mode-hook)
  (setq solarized-scale-org-headlines nil)
#+END_SRC

Don't use variable pitch in the solarized color-scheme.

#+BEGIN_SRC emacs-lisp
  (setq solarized-use-variable-pitch nil)
#+END_SRC

** Task Management

Store org files in Dropbox.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org/")
#+END_SRC

Setup the global TODO list.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-agenda-show-log t)
#+END_SRC

Record the time a TODO was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Create a function to go to my tasks.org file. Called with =M-x RET tasks RET=.
Source: [[https://github.com/munen/emacs.d/#general-configuration]]

#+BEGIN_SRC emacs-lisp
  (defun set-org-agenda-files ()
    "Set different org-files to be used in org-agenda"
    (setq org-agenda-files (list (concat org-directory "tasks.org")
                                 (concat org-directory "refile-beorg.org"))))

  (set-org-agenda-files)

  (defun tasks ()
    "Open main 'org-mode' file and start 'org-agenda' for today."
    (interactive)
    (find-file (concat org-directory "tasks.org"))
    (set-org-agenda-files)
    (org-agenda-list)
    (org-agenda-day-view)
    (shrink-window-if-larger-than-buffer)
    (other-window 1))
#+END_SRC

** Exporting

Change straight quotes to curly quotes when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

Don’t include a footer with my contact and publishing information at the bottom of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

Set the Emacs browser to the default MacOS browser.

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-default-macosx-browser)
#+END_SRC

Produce pdfs with syntax highlighting with =minted=.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

* Helm

Use Helm for incremental completions and narrowing selections.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :init
    (helm-mode 1))
#+END_SRC

* Prose
** Linting

Use =proselint=.

#+BEGIN_SRC emacs-lisp
  (require 'flycheck)

  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))

  (add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

Use flycheck in the appropriate buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook #'flycheck-mode)
  (add-hook 'gfm-mode-hook #'flycheck-mode)
  (add-hook 'text-mode-hook #'flycheck-mode)
  (add-hook 'org-mode-hook #'flycheck-mode)
#+END_SRC

Diminish =flycheck=.

#+BEGIN_SRC emacs-lisp
  (diminish 'flycheck-mode)
#+END_SRC

Set spell checker to =aspell=.

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "/usr/local/bin/aspell")
#+END_SRC

* Editing Settings
** Visit Emacs configuration

Bind C-c e to open Emacs configuration file.

#+BEGIN_SRC emacs-lisp
  (defun visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'visit-emacs-config)
#+END_SRC

** Reload Emacs configuration

#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/configuration.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/configuration.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Save location within a file

If I close the file and open it later, I will return to the place I left off.

#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+END_SRC
** Auto revert files on change

When something changes a file, automatically refresh the buffer containing that file so they can’t get out of sync.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Always indent with spaces

No explanation needed.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Code folding

Enable code folding for programming modes.

=zc= Fold
=za= Unfold
=zR= Unfold everything

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC

** Use =projectile= everywhere

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :init
      (projectile-mode 1))
#+END_SRC
** Smooth scrolling

Makes scrolling a whole lot nicer.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Command completion

Use =which-key= to offer suggestions for completing a command.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
      (which-key-mode))
#+END_SRC
** Undo tree

Use =undo-tree= for better undo history.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

** Whitespace

Delete trailing whitespace after saving in all modes except markdown-mode and org-mode.
Markdown uses two trailing blanks to signal a line break.
Source: [[https://github.com/munen/emacs.d/#delete-trailing-whitespace]]

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook '(lambda ()
                                (when (not (or (derived-mode-p 'markdown-mode)
                                               (derived-mode-p 'org-mode))
                                  (delete-trailing-whitespace)))))
#+END_SRC
