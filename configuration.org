#+TITLE: Emacs Configuration
#+AUTHOR: Samarth Kishor
#+OPTIONS: toc:nil num:nil

* Use =use-package=

  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (setq use-package-verbose t)
    (setq use-package-always-ensure t)

    (eval-when-compile
      (require 'use-package))
  #+END_SRC

* Personal Information

  Name and email.

  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Samarth Kishor"
          user-mail-address "samarthkishor1@gmail.com")
  #+END_SRC

* =evil-mode=

  Use =evil-leader= to emulate leader key functionality. Set SPACE as the leader key.

  #+BEGIN_SRC emacs-lisp
    (use-package evil-leader
      :after (evil-commentary projectile-mode)
      :commands (evil-leader-mode global-evil-leader-mode)
      :ensure evil-leader
      :demand evil-leader
      :init
      (setq evil-leader/in-all-states 1)
      :config
      (global-evil-leader-mode t)
      (evil-leader/set-leader "<SPC>")
      (evil-leader/set-key
        "h"  'evil-window-left
        "j"  'evil-window-bottom
        "k"  'evil-window-up
        "l"  'evil-window-right
        "b"  'ivy-switch-buffer
        "m"  'counsel-imenu
        "e" 'flycheck-list-errors
        "gg" 'magit-status
        "pp" 'counsel-projectile-switch-project))_
  #+End_SRC

  Use =evil=.

  Source: [[https://github.com/bbatsov/prelude/blob/master/modules/prelude-evil.el][Emacs Prelude]]

  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
      (setq evil-want-integration nil)
      :config
      (defun prelude-shift-left-visual ()
        "Shift left and restore visual selection."
        (interactive)
        (evil-shift-left (region-beginning) (region-end))
        (evil-normal-state)
        (evil-visual-restore))
      (defun prelude-shift-right-visual ()
        "Shift right and restore visual selection."
        (interactive)
        (evil-shift-right (region-beginning) (region-end))
        (evil-normal-state)
        (evil-visual-restore))
      (use-package evil-numbers :ensure t)
      (setq evil-want-fine-undo t)
      (setq evil-shift-width 2)
      (setq evil-want-abbrev-expand-on-insert-exit nil)
      (define-key evil-normal-state-map (kbd "q") nil)
      (define-key evil-normal-state-map (kbd "M-.") nil)
      (define-key evil-normal-state-map (kbd "M-,") nil)
      (define-key evil-normal-state-map (kbd "C-A") 'evil-numbers/inc-at-pt)
      (define-key evil-normal-state-map (kbd "C-S-A") 'evil-numbers/dec-at-pt)
      (define-key evil-visual-state-map (kbd ">") 'prelude-shift-right-visual)
      (define-key evil-visual-state-map (kbd "<") 'prelude-shift-left-visual)
      (evil-define-key nil evil-normal-state-map
        "j" 'evil-next-visual-line
        "k" 'evil-previous-visual-line)
      (evil-declare-key 'normal org-mode-map
        "gk" 'outline-up-heading
        "gj" 'outline-next-visible-heading
        "H" 'org-beginning-of-line ; smarter behavior on headlines etc.
        "L" 'org-end-of-line ; smarter behavior on headlines etc.
        "t" 'org-todo ; mark a TODO item as DONE
        ",c" 'org-cycle
        (kbd "TAB") 'org-cycle
        "$" 'org-end-of-line ; smarter behavior on headlines etc.
        "^" 'org-beginning-of-line ; ditto
        "-" 'org-ctrl-c-minus ; change bullet style
        "<" 'org-metaleft ; out-dent
        ">" 'org-metaright) ; indent
      (evil-mode 1))
  #+END_SRC

  Use evil-mode (almost) everywhere.

  #+BEGIN_SRC emacs-lisp
    (use-package evil-collection
      :after evil
      :defer t
      :config
      (evil-collection-init))
  #+END_SRC

  Enable =M-x= in evil-mode.

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-x") 'execute-extended-command)
  #+END_SRC

  Change sentence (marked by a period) ending from one space to two spaces. This mostly fixes evil-mode sentence motions.

  #+BEGIN_SRC emacs-lisp
    (setq sentence-end-double-space nil)
    (define-key evil-normal-state-map ")" 'forward-sentence)
  #+END_SRC

  Use =evil-commentary= to make commenting lines easier.

  #+BEGIN_SRC emacs-lisp
    (use-package evil-commentary
      :ensure t
      :requires (evil)
      :hook (prog-mode . evil-commentary-mode))
  #+END_SRC

  Use =evil-surround= to emulate =surround.vim=.

  #+BEGIN_SRC emacs-lisp
    (use-package evil-surround
      :config
      (global-evil-surround-mode 1)
      (add-hook 'c++-mode-hook (lambda ()
                                 (push '(?< . ("< " . " >")) evil-surround-pairs-alist)))
      (add-hook 'java-mode-hook (lambda ()
                                  (push '(?< . ("< " . " >")) evil-surround-pairs-alist)))

      (defmacro define-and-bind-quoted-text-object (name key start-regex end-regex)
        (let ((inner-name (make-symbol (concat "evil-inner-" name)))
              (outer-name (make-symbol (concat "evil-a-" name))))
          `(progn
             (evil-define-text-object ,inner-name (count &optional beg end type)
               (evil-select-paren ,start-regex ,end-regex beg end type count nil))
             (evil-define-text-object ,outer-name (count &optional beg end type)
               (evil-select-paren ,start-regex ,end-regex beg end type count t))
             (define-key evil-inner-text-objects-map ,key #',inner-name)
             (define-key evil-outer-text-objects-map ,key #',outer-name))))

      (define-and-bind-quoted-text-object "pipe" "|" "|" "|")
      (define-and-bind-quoted-text-object "slash" "/" "/" "/")
      (define-and-bind-quoted-text-object "star" "*" "*" "*")
      (define-and-bind-quoted-text-object "dollar" "$" "\\$" "\\$")
      (add-hook 'org-mode-hook (define-and-bind-quoted-text-object "equals" "=" "=" "=")))
  #+END_SRC

  Multiple cursors!

  #+BEGIN_SRC emacs-lisp
    (use-package evil-mc
      :ensure t
      :defer t
      :diminish
      :after (evil)
      :init
      ;; To avoid conflicts with other packages, only keep the g* bindings
      (setq evil-mc-key-map
            (let ((map (make-sparse-keymap))
                  (keys '(("grm" . evil-mc-make-all-cursors)
                          ("gru" . evil-mc-undo-all-cursors)
                          ("grs" . evil-mc-pause-cursors)
                          ("grr" . evil-mc-resume-cursors)
                          ("grf" . evil-mc-make-and-goto-first-cursor)
                          ("grl" . evil-mc-make-and-goto-last-cursor)
                          ("grh" . evil-mc-make-cursor-here)
                          ("grj" . evil-mc-make-cursor-move-next-line)
                          ("grk" . evil-mc-make-cursor-move-prev-line)
                          ("M-n" . evil-mc-make-and-goto-next-cursor)
                          ("grN" . evil-mc-skip-and-goto-next-cursor)
                          ("grP" . evil-mc-skip-and-goto-prev-cursor)
                          ("grn" . evil-mc-skip-and-goto-next-match)
                          ("grp" . evil-mc-skip-and-goto-prev-match))))
              (dolist (key-data keys)
                (evil-define-key 'normal map (kbd (car key-data)) (cdr key-data))
                (evil-define-key 'visual map (kbd (car key-data)) (cdr key-data)))
              map))
      :config
      (setq-default evil-mc-enable-bar-cursor nil)
      ;; Use a proper face for cursors
      (setq evil-mc-cursor-current-face '(:reverse-video t))
      ;; Enable globally to make vim-like bindings (ie gr*) available
      (global-evil-mc-mode 1))
  #+END_SRC

  Emulate vim's =lion= package for aligning text in Emacs.

  #+BEGIN_SRC emacs-lisp
    (use-package evil-lion
      :ensure t
      :after (evil)
      :config
      (evil-lion-mode))
  #+END_SRC

  Disable evil-mode for some modes.

  Source: [[https://github.com/munen/emacs.d/][Munen's .emacs.d]]

  #+BEGIN_SRC emacs-lisp
    (mapc (lambda (mode)
            (evil-set-initial-state mode 'emacs))
          '(dired-mode
            image-dired-mode
            image-dired-thumbnail-mode
            eww-mode))
  #+END_SRC

* UI Preferences
** Theme

   Doom themes are nice. I prefer nord.

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :ensure t
       :init (load-theme 'doom-nord t))
   #+END_SRC

** Tweak window settings

   Hide the scroll, tool, and menu bars.

   #+BEGIN_SRC emacs-lisp
     (if window-system (scroll-bar-mode -1))
     (tool-bar-mode 0)
   #+END_SRC

   Start in full-screen.

   #+BEGIN_SRC emacs-lisp
     (if (eq window-system 'ns)
         (toggle-frame-maximized)
       (toggle-frame-fullscreen))
   #+END_SRC

   Set the theme as a "safe theme".

   #+BEGIN_SRC emacs-lisp
     (setq custom-safe-themes t)
   #+END_SRC

   Make the titlebar dark on macOS.

   Source: [[https://huytd.github.io/emacs-from-scratch.html#orge3a802f][Emacs from scratch]]

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist '(ns-appearance . dark))
     (setq ns-use-proxy-icon  nil)
     (setq frame-title-format nil)
   #+END_SRC

   Center the cursor while scrolling.

   Source: [[https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs.html][Two Wrongs]]

   #+BEGIN_SRC emacs-lisp
     (setq scroll-preserve-screen-position t
           scroll-conservatively 0
           maximum-scroll-margin 0.5
           scroll-margin 99999)
   #+END_SRC

** Remove startup screen

   It gets annoying after a while.

   #+BEGIN_SRC emacs-lisp
     (setq-default inhibit-startup-screen t)
   #+END_SRC

* Mode line

  Spaceline might be a bit too much for my needs but it looks great so it's worth it.

  Update: switched to doom-modeline because it's faster.

  #+BEGIN_SRC emacs-lisp
    ;; (use-package powerline
    ;;   :if window-system
    ;;   :config (setq-default powerline-default-separator 'nil))

    ;; (use-package spaceline
    ;;   :after powerline
    ;;   :ensure t
    ;;   :config
    ;;   (setq spaceline-responsive nil))

    ;; (use-package spaceline-all-the-icons
    ;;   :after spaceline
    ;;   :config
    ;;   (setq spaceline-all-the-icons-icon-set-modified 'circle
    ;;         spaceline-all-the-icons-icon-set-flycheck-slim 'dots
    ;;         spaceline-all-the-icons-separator-type 'none
    ;;         spaceline-highlight-face-func 'spaceline-highlight-face-evil-state
    ;;         spaceline-all-the-icons-flycheck-alternate t)
    ;;   (spaceline-all-the-icons-theme)
    ;;   (spaceline-toggle-all-the-icons-projectile-on)
    ;;   (spaceline-toggle-all-the-icons-buffer-position-on)
    ;;   (spaceline-helm-mode)
    ;;   (spaceline-toggle-all-the-icons-minor-modes-off))

    (use-package doom-modeline
      :ensure t
      :defer t
      :hook (after-init . doom-modeline-init)
      :config
      (setq doom-modeline-height 20)
      (setq doom-modeline-major-mode-icon t)
      (setq doom-modeline-buffer-file-name-style 'truncate-upto-project))
  #+END_SRC

  Remove the weird lines below the mode-line. Need to reload with =C-c r= after starting Emacs for this to work (not sure why).

  Source: [[https://github.com/domtronn/all-the-icons.el/issues/29][all-the-icons.el issues]]

  #+BEGIN_SRC emacs-lisp
    (defun remove-mode-line-box ()
      (set-face-attribute 'mode-line nil :box nil :underline nil)
      (set-face-attribute 'mode-line-inactive nil :box nil :underline nil))

    (when (window-system)
      (remove-mode-line-box))
  #+END_SRC

  Get rid of clutter using =diminish=.

  #+BEGIN_SRC emacs-lisp
    (use-package diminish
      :ensure t
      :init
      (diminish 'undo-tree-mode)
      (diminish 'auto-revert-mode)
      (diminish 'global-auto-revert-mode)
      (diminish 'eldoc-mode)
      (diminish 'hs-minor-mode)
      (diminish 'flyspell-mode))
  #+END_SRC

  Don't display the system load average.

  #+BEGIN_SRC emacs-lisp
    (setq display-time-default-load-average nil)
  #+END_SRC

** Disable the bell

   #+BEGIN_SRC emacs-lisp
     (setq visible-bell nil)
     (setq ring-bell-function 'ignore)
   #+END_SRC

   Flash the mode-line instead.
   Source: [[http://www.stefanom.org/prettify-my-emacs-symbols/]]

   #+BEGIN_SRC emacs-lisp
     (defun my-terminal-visible-bell ()
       "A friendlier visual bell effect."
       (invert-face 'mode-line)
       (run-with-timer 0.1 nil 'invert-face 'mode-line))

     (setq visible-bell nil
           ring-bell-function 'my-terminal-visible-bell)
   #+END_SRC

** Set the font to Fira Code

   It's the best.

   #+BEGIN_SRC emacs-lisp
     (when (window-system)
       (set-frame-font "Fira Code 14" nil t))
   #+END_SRC

   Enable ligatures.

   [disabled because it causes too many problems]

   #+BEGIN_SRC emacs-lisp
     ;; (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
     ;;                (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
     ;;                (36 . ".\\(?:>\\)")
     ;;                (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
     ;;                (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
     ;;                (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
     ;;                (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
     ;;                (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
     ;;                ;; (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)") commenting this line should fix a problem with CIDER
     ;;                (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
     ;;                (48 . ".\\(?:x[a-zA-Z]\\)")
     ;;                (58 . ".\\(?:::\\|[:=]\\)")
     ;;                (59 . ".\\(?:;;\\|;\\)")
     ;;                (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
     ;;                (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
     ;;                (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
     ;;                (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
     ;;                (91 . ".\\(?:]\\)")
     ;;                (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
     ;;                (94 . ".\\(?:=\\)")
     ;;                (119 . ".\\(?:ww\\)")
     ;;                (123 . ".\\(?:-\\)")
     ;;                (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
     ;;                (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
     ;;                )
     ;;              ))
     ;;   (dolist (char-regexp alist)
     ;;     (set-char-table-range composition-function-table (car char-regexp)
     ;;                           `([,(cdr char-regexp) 0 font-shape-gstring]))))
   #+END_SRC

   Set the fallback font and ligatures. Make sure Fira Code Symbol is installed.

   #+BEGIN_SRC emacs-lisp
     ;; (add-hook 'after-make-frame-functions
     ;;           (lambda (frame) (set-fontset-font t
     ;;                                             '(#Xe100 . #Xe16f) "Fira Code Symbol")))
     ;; (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")

     ;; (defconst fira-code-font-lock-keywords-alist
     ;;   (mapcar (lambda (regex-char-pair)
     ;;             `(,(car regex-char-pair)
     ;;               (0 (prog1 ()
     ;;                    (compose-region (match-beginning 1)
     ;;                                    (match-end 1)
     ;;                                    ,(concat "  "
     ;;                                             (list
     ;;                                              (decode-char 'ucs
     ;;                                                           (cadr regex-char-pair)))))))))
     ;;           '(("\\(www\\)"                   #Xe100)
     ;;             ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
     ;;             ("\\(\\*\\*\\*\\)"             #Xe102)
     ;;             ("\\(\\*\\*/\\)"               #Xe103)
     ;;             ("\\(\\*>\\)"                  #Xe104)
     ;;             ("[^*]\\(\\*/\\)"              #Xe105)
     ;;             ("\\(\\\\\\\\\\)"              #Xe106)
     ;;             ("\\(\\\\\\\\\\\\\\)"          #Xe107)
     ;;             ("\\({-\\)"                    #Xe108)
     ;;             ("\\(:::\\)"                   #Xe10b)
     ;;             ("[^=]\\(:=\\)"                #Xe10c)
     ;;             ;; ("\\(!!\\)"                    #Xe10d)
     ;;             ;; this should be hooked to sml-mode only
     ;;             ("\\(<>\\)"                    #Xe10e)
     ;;             ("\\(!=\\)"                    #Xe10e)
     ;;             ("\\(!==\\)"                   #Xe10f)
     ;;             ("\\(-}\\)"                    #Xe110)
     ;;             ("\\(--\\)"                    #Xe111)
     ;;             ("\\(---\\)"                   #Xe112)
     ;;             ("\\(-->\\)"                   #Xe113)
     ;;             ("[^-]\\(->\\)"                #Xe114)
     ;;             ("\\(->>\\)"                   #Xe115)
     ;;             ("\\(-<\\)"                    #Xe116)
     ;;             ("\\(-<<\\)"                   #Xe117)
     ;;             ("\\(-~\\)"                    #Xe118)
     ;;             ;; ("\\(#{\\)"                    #Xe119)
     ;;             ("\\(#\\[\\)"                  #Xe11a)
     ;;             ("\\(##\\)"                    #Xe11b)
     ;;             ("\\(###\\)"                   #Xe11c)
     ;;             ("\\(####\\)"                  #Xe11d)
     ;;             ("\\(#(\\)"                    #Xe11e)
     ;;             ("\\(#\\?\\)"                  #Xe11f)
     ;;             ("\\(#_\\)"                    #Xe120)
     ;;             ("\\(#_(\\)"                   #Xe121)
     ;;             ("\\(\\.-\\)"                  #Xe122)
     ;;             ("\\(\\.=\\)"                  #Xe123)
     ;;             ("\\(\\.\\.\\)"                #Xe124)
     ;;             ("\\(\\.\\.<\\)"               #Xe125)
     ;;             ("\\(\\.\\.\\.\\)"             #Xe126)
     ;;             ("\\(\\?=\\)"                  #Xe127)
     ;;             ("\\(\\?\\?\\)"                #Xe128)
     ;;             ("\\(;;\\)"                    #Xe129)
     ;;             ("\\(/\\*\\)"                  #Xe12a)
     ;;             ("\\(/\\*\\*\\)"               #Xe12b)
     ;;             ("\\(/=\\)"                    #Xe12c)
     ;;             ("\\(/==\\)"                   #Xe12d)
     ;;             ("\\(/>\\)"                    #Xe12e)
     ;;             ("\\(//\\)"                    #Xe12f)
     ;;             ("\\(///\\)"                   #Xe130)
     ;;             ("\\(&&\\)"                    #Xe131)
     ;;             ("\\(||\\)"                    #Xe132)
     ;;             ("\\(||=\\)"                   #Xe133)
     ;;             ("[^|]\\(|=\\)"                #Xe134)
     ;;             ("\\(|>\\)"                    #Xe135)
     ;;             ("\\(\\^=\\)"                  #Xe136)
     ;;             ("\\(\\$>\\)"                  #Xe137)
     ;;             ("\\(\\+\\+\\)"                #Xe138)
     ;;             ("\\(\\+\\+\\+\\)"             #Xe139)
     ;;             ("\\(\\+>\\)"                  #Xe13a)
     ;;             ("\\(=:=\\)"                   #Xe13b)
     ;;             ("[^!/]\\(==\\)[^>]"           #Xe13c)
     ;;             ("\\(===\\)"                   #Xe13d)
     ;;             ("\\(==>\\)"                   #Xe13e)
     ;;             ("[^=]\\(=>\\)"                #Xe13f)
     ;;             ("\\(=>>\\)"                   #Xe140)
     ;;             ("\\(<=\\)"                    #Xe141)
     ;;             ("\\(=<<\\)"                   #Xe142)
     ;;             ("\\(=/=\\)"                   #Xe143)
     ;;             ("\\(>-\\)"                    #Xe144)
     ;;             ("\\(>=\\)"                    #Xe145)
     ;;             ("\\(>=>\\)"                   #Xe146)
     ;;             ("[^-=]\\(>>\\)"               #Xe147)
     ;;             ("\\(>>-\\)"                   #Xe148)
     ;;             ("\\(>>=\\)"                   #Xe149)
     ;;             ("\\(>>>\\)"                   #Xe14a)
     ;;             ("\\(<\\*\\)"                  #Xe14b)
     ;;             ("\\(<\\*>\\)"                 #Xe14c)
     ;;             ("\\(<|\\)"                    #Xe14d)
     ;;             ("\\(<|>\\)"                   #Xe14e)
     ;;             ("\\(<\\$\\)"                  #Xe14f)
     ;;             ("\\(<\\$>\\)"                 #Xe150)
     ;;             ("\\(<!--\\)"                  #Xe151)
     ;;             ("\\(<-\\)"                    #Xe152)
     ;;             ("\\(<--\\)"                   #Xe153)
     ;;             ("\\(<->\\)"                   #Xe154)
     ;;             ("\\(<\\+\\)"                  #Xe155)
     ;;             ("\\(<\\+>\\)"                 #Xe156)
     ;;             ("\\(<=\\)"                    #Xe157)
     ;;             ("\\(<==\\)"                   #Xe158)
     ;;             ("\\(<=>\\)"                   #Xe159)
     ;;             ("\\(<=<\\)"                   #Xe15a)
     ;;             ;; ("\\(<>\\)"                    #Xe15b)
     ;;             ("[^-=]\\(<<\\)"               #Xe15c)
     ;;             ("\\(<<-\\)"                   #Xe15d)
     ;;             ("\\(<<=\\)"                   #Xe15e)
     ;;             ("\\(<<<\\)"                   #Xe15f)
     ;;             ("\\(<~\\)"                    #Xe160)
     ;;             ("\\(<~~\\)"                   #Xe161)
     ;;             ("\\(</\\)"                    #Xe162)
     ;;             ("\\(</>\\)"                   #Xe163)
     ;;             ("\\(~@\\)"                    #Xe164)
     ;;             ("\\(~-\\)"                    #Xe165)
     ;;             ("\\(~=\\)"                    #Xe166)
     ;;             ("\\(~>\\)"                    #Xe167)
     ;;             ("[^<]\\(~~\\)"                #Xe168)
     ;;             ("\\(~~>\\)"                   #Xe169)
     ;;             ("\\(%%\\)"                    #Xe16a)
     ;;             ("[^:=]\\(:\\)[^:=]"           #Xe16c)
     ;;             ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
     ;;             ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

     ;; (defun add-fira-code-symbol-keywords ()
     ;;   "Add the Fira Code ligatures from Fira Code Symbol to selected keywords."
     ;;   (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

     ;; (add-hook 'prog-mode-hook #'add-fira-code-symbol-keywords)
   #+END_SRC

** Line settings

   Highlight the current line.

   #+BEGIN_SRC emacs-lisp
     (when window-system
       (global-hl-line-mode))
   #+END_SRC

   Never lose my cursor again.

   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :defer t
       :diminish beacon-mode
       :init
       (beacon-mode 1))
   #+END_SRC

   Show fringe indicators as curly arrows.

   #+BEGIN_SRC emacs-lisp
     (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
   #+END_SRC

   Indicate empty lines.

   #+BEGIN_SRC emacs-lisp
     (setq-default indicate-empty-lines t)
   #+END_SRC

** Distraction-free editing

   =writeroom-mode= gives Emacs a distraction-free writing experience.

   #+BEGIN_SRC emacs-lisp
     (use-package writeroom-mode
       :ensure t
       :defer t)
   #+END_SRC

* Editing Settings
** Visit Emacs configuration

   Bind C-c e to open Emacs configuration file.

   #+BEGIN_SRC emacs-lisp
     (defun visit-emacs-config ()
       (interactive)
       (find-file "~/.emacs.d/configuration.org"))

     (global-set-key (kbd "C-c e") 'visit-emacs-config)
   #+END_SRC

** Reload Emacs configuration

   #+BEGIN_SRC emacs-lisp
     (defun config-reload ()
       "Reloads ~/.emacs.d/configuration.org at runtime"
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/configuration.org")))

     (global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC

** Save location within a file

   If I close the file and open it later, I will return to the place I left off.

   #+BEGIN_SRC emacs-lisp
     (save-place-mode t)
   #+END_SRC

** Auto revert files on change

   When something changes a file, automatically refresh the buffer containing that file so they can’t get out of sync.

   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode t)
   #+END_SRC

** Always indent with spaces

   No explanation needed.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** Code folding

   Enable code folding for programming modes.

   =zc= Fold
   =za= Unfold
   =zR= Unfold everything

   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook #'hs-minor-mode)
   #+END_SRC

** Use =projectile= everywhere

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :diminish projectile-mode
       :init
       (projectile-mode 1)
       :config
       (setq projectile-enable-caching nil)
       (add-to-list 'projectile-globally-ignored-directories "*.cquery_cached_index")
       (add-to-list 'projectile-globally-ignored-directories "*node_modules"))
   #+END_SRC

** Smooth scrolling

   Makes scrolling a whole lot nicer.

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC
** Command completion

   Use =which-key= to offer suggestions for completing a command.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :diminish which-key-mode
       :config
       (which-key-mode))
   #+END_SRC

** Undo tree

   Use =undo-tree= for better undo history.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode))
   #+END_SRC

** Whitespace

   Delete trailing whitespace after saving in all modes except markdown-mode and org-mode.
   Markdown uses two trailing blanks to signal a line break.

   Source: [[https://github.com/munen/emacs.d/#delete-trailing-whitespace]]

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook '(lambda ()
                                    (when (not (or (derived-mode-p 'markdown-mode)
                                                   (derived-mode-p 'org-mode)))
                                      (delete-trailing-whitespace))))
   #+END_SRC

   Declare an interactive function to clean whitespace and indent the buffer.

   Source: https://github.com/wandersoncferreira/dotfiles/blob/min/emacs/conf.org#editing-mode

   #+BEGIN_SRC emacs-lisp
     (defun my/normalize-buffer ()
       "Delete extra whitespace, tabs -> spaces, and indent buffer"
       (interactive)
       (delete-trailing-whitespace)
       (untabify (point-min) (point-max))
       (indent-region (point-min) (point-max)))
   #+END_SRC

** Jump to words

   =avy= is a package that enhances navigation in Emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind (("s-," . avy-goto-word-or-subword-1)
              ("s-." . avy-goto-char)))
   #+END_SRC

** Mac-specific modifier keys

   Make Emacs easier to use with MacOS.

   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'darwin)
       (setq mac-option-modifier 'meta
             mac-command-modifier 'control
             mac-control-modifier 'super
             mac-right-command-modifier 'super
             mac-right-option-modifier 'none))
   #+END_SRC

** Expand region

   Make it easy to select regions (if visual mode keybindings aren't enough).

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind (("C-=" . er/expand-region)
              ("M-=" . er/contract-region)))
   #+END_SRC

** Date

   Declare an interactive function to insert the date.

   Source: https://github.com/wandersoncferreira/dotfiles/blob/min/emacs/conf.org#date-management

   #+BEGIN_SRC emacs-lisp
     (defun my/insert-date ()
       "Function to insert date into buffer."
       (interactive)
       (insert (format-time-string
                "%m/%m/%Y" (current-time))))
   #+END_SRC

** Line wrapping

   Use visual-line-mode to soft wrap lines whenever possible.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook #'visual-line-mode)
     (add-hook 'org-mode #'visual-line-mode)
   #+END_SRC

** Iedit

   This package is similar to multiple-cursors but it's a bit easier to use for editing multiple regions at the same time.

   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t
       :defer t
       :after evil-leader
       :config
       (evil-leader/set-key "r" 'iedit-mode))
   #+END_SRC

** Eyebrowse

   Eyebrowse is a package that gives Emacs the ability to manage "workspaces"

   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :ensure t
       :config
       (eyebrowse-mode))
   #+END_SRC


   #+BEGIN_SRC emacs-lisp
     (use-package counsel-projectile
       :ensure t
       :config
       (counsel-projectile-mode)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
   #+END_SRC

* Programming Environments
** General settings

   Add =homebrew= to Emacs path.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :if (memq window-system '(mac ns))
       :ensure t
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC

   Write backup files to their own directory, even if they are in version control.

   Source: [[http://whattheemacsd.com/init.el-02.html][What the .emacs.d]]

   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
           `(("." . ,(expand-file-name
                      (concat user-emacs-directory "backups")))))

     (setq vc-make-backup-files t)
   #+END_SRC

   Don't create lockfiles (files that start with #).

   #+BEGIN_SRC emacs-lisp
     (setq create-lockfiles nil)
   #+END_SRC

   Use UTF-8 encoding everywhere.

   #+BEGIN_SRC emacs-lisp
     (set-language-environment "UTF-8")
     (set-default-coding-systems 'utf-8)
   #+END_SRC

   Indent by two spaces.

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 2)
     (setq-default indent-tabs-mode nil)
   #+END_SRC

   Automatically indent with the return key.

   #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "RET") 'newline-and-indent)
   #+END_SRC

   Show parenthesis highlighting.

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC

   Change the color of delimiters in programming modes.

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC

   Add column numbers to the bottom bar.

   #+BEGIN_SRC emacs-lisp
     (column-number-mode t)
   #+END_SRC

   Follow symlinks.

   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
   #+END_SRC

   Use =yasnippets= for snippets.

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :config
       (setq yas-snippet-dirs (append yas-snippet-dirs
                                      '("~/.emacs.d/snippets/")))
       (yas-global-mode 1))

     (use-package yasnippet-snippets :ensure t)
   #+END_SRC

   Enable =eldoc= globally

   #+BEGIN_SRC emacs-lisp
     (global-eldoc-mode -1)
   #+END_SRC

** Magit

   Bring up the status menu with =C-x g=.

   Use =evil= keybindings.

   Highlight commit text in the summary that goes over 50 characters.

   Enable spellchecking when writing commit messages.

   Start in insert mode when writing a commit message.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind ("C-x g" . magit-status)
       :config
       (use-package evil-magit)
       (setq git-commit-summary-max-length 50)
       (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
       (add-hook 'with-editor-mode-hook 'evil-insert-state))
   #+END_SRC

** Auto-complete

   Use =company= for auto-completion engine.

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :diminish company-mode
       :bind (:map company-active-map
                   ("M-j" . company-select-next)
                   ("M-k" . company-select-previous))
       :init
       (global-company-mode t))
   #+END_SRC

** Language Servers

   Use =eglot= to support the language server protocol in Emacs. Start it with =M-x eglot=.

   #+BEGIN_SRC emacs-lisp
     (use-package eglot
       :ensure t
       :defer t
       :config
       (add-to-list 'eglot-server-programs '((c++ mode c-mode) . (eglot-cquery "cquery"))))
   #+END_SRC

** C/C++

   Use the =cquery= language server to make Emacs a C/C++ IDE.

   [removed because =eglot= is better for my use case]

   #+BEGIN_SRC emacs-lisp
     ;; (use-package cquery
     ;;   :ensure t
     ;;   :defer t
     ;;   :commands (lsp-cquery-enable)
     ;;   :hook (c-mode-common . lsp-cquery-enable)
     ;;   :config
     ;;   (setq cquery-executable "/usr/local/bin/cquery"))
   #+END_SRC

   Use =astyle= to format code.

   Source: [[https://chriszheng.science/2015/04/01/Add-astyle-support-for-Emacs/][this blog post]]

   #+BEGIN_SRC emacs-lisp
     (setq-default c-basic-offset 4)
     (defvar astyle-command "astyle --align-pointer=type -A2 -s4 -S")

     (defun astyle-buffer (start end)
       "Run astyle on region or buffer"
       (interactive (if mark-active
                        (list (region-beginning) (region-end))
                      (list (point-min) (point-max))))
       (save-restriction
         (shell-command-on-region start end
                                  astyle-command
                                  (current-buffer) t
                                  (get-buffer-create "*Astyle Errors*") t)))

     (add-hook 'c-mode-common-hook
               (lambda ()
                 (add-hook 'before-save-hook 'astyle-buffer)))

     (add-hook 'c-mode-common-hook
               (lambda ()
                 (unless (file-exists-p "Makefile")
                   (set (make-local-variable 'compile-command)
                        (let ((file (file-name-nondirectory buffer-file-name)))
                          (concat "clang++ -Wall -g -o "
                                  (file-name-sans-extension file)
                                  " " file))))))
   #+END_SRC

** Clojure(script)

   Use CIDER as the "IDE".

   #+BEGIN_SRC emacs-lisp
     (use-package cider
       :ensure t
       :defer t
       :commands (cider cider-connect cider-jack-in)
       :init
       (add-hook 'cider-repl-mode-hook #'company-mode)
       (add-hook 'cider-mode-hook #'company-mode)
       (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
       (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
       :config
       (setq cider-repl-use-pretty-printing t)
       (setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")
       (setq cider-boot-parameters "dev"))
   #+END_SRC

   Fancy refactoring stuff.

   #+BEGIN_SRC emacs-lisp
     (use-package clj-refactor
       :ensure t
       :defer t
       :diminish
       :init
       (add-hook 'clojure-mode-hook
                 (lambda ()
                   (clj-refactor-mode 1)
                   (setq cljr-warn-on-eval nil)
                   (yas-minor-mode 1)
                   (setq auto-composition-mode nil) ;; Fira Code causes CIDER to hang
                   ;; leaves cider-macroexpand-1 unbound
                   (cljr-add-keybindings-with-prefix "C-c C-m"))))
   #+END_SRC

   Since CIDER doesn't work with the =lumo= repl, use =inf-clojure= mode when needed.

   Note: =inf-clojure= and CIDER are incompatible, so invoke the mode with =M-x=.

   #+BEGIN_SRC emacs-lisp
     (use-package inf-clojure
       :ensure t
       :defer t
       :config
       (defun my/lumo ()
         (when (bound-and-true-p cider-mode)
           (cider-mode -1))
         (setq inf-clojure-program     "lumo -d"
               inf-clojure-generic-cmd "lumo -d"
               inf-clojure-lein-cmd    "lumo -d"))
       (add-hook 'inf-clojure-mode-hook 'my/lumo)
       (add-hook 'inf-clojure-minor-mode-hook 'my/lumo))
   #+END_SRC

   Recognize .boot files as valid Clojure code.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.boot\\'" . clojure-mode))
   #+END_SRC

** Common Lisp

   Use SLIME as the Common Lisp IDE.

   #+BEGIN_SRC emacs-lisp
     (use-package slime
       :ensure t
       :defer t
       :config
       (setq inferior-lisp-program (shell-cmd "which sbcl"))
       (setq slime-contribs '(slime-fancy)))
   #+END_SRC

** JavaScript

   Use =js2-mode= to get some nice JavaScript IDE features.
   Make sure =eslint= is configured within the project root by running =eslint --init=, otherwise Flycheck will not work.

   Source: [[https://github.com/CSRaghunandan/.emacs.d/blob/master/setup-files/setup-js.el][more dotfiles]] and also [[http://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][this blog post]]

   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :ensure t
       :defer t
       :mode ("\\.js" . js2-mode)
       :interpreter ("node" . js2-mode)
       :config
       (setq js-basic-indent 2)
       (setq-default js2-basic-indent 2
                     js2-basic-offset 2
                     js2-auto-indent-p t
                     js2-cleanup-whitespace t
                     js2-enter-indents-newline t
                     js2-indent-on-enter-key t)
       (setq flycheck-javascript-eslint-executable "eslint")
       (setq-default flycheck-disabled-checkers
                     (append flycheck-disabled-checkers
                             '(javascript-jshint)))
       ;; turn off all warnings in js2-mode because flycheck + eslint will handle them
       (setq js2-mode-show-parse-errors t
             js2-mode-show-strict-warnings nil
             js2-strict-missing-semi-warning nil)
       (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
       (add-hook 'js2-mode-hook
                 (lambda ()
                   (flycheck-mode)
                   (flycheck-select-checker "javascript-eslint"))))
   #+END_SRC

   Use =js2-refactor= for obvious reasons.

   #+BEGIN_SRC emacs-lisp
     (use-package js2-refactor
       :after js2-mode
       :hook ((js2-mode . js2-refactor-mode))
       :config
       ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref
       (define-key js-mode-map (kbd "M-.") nil)
       (js2r-add-keybindings-with-prefix "C-c C-r"))

     ;; xref-js2 supports things like jump to definition using ag instead of tags
     ;; (use-package xref-js2
     ;;   :ensure t
     ;;   :after js2-mode)

     ;; (add-hook 'js2-mode-hook (lambda ()
     ;;                            (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
   #+END_SRC

   Use the =Tern= JavaScript analyzer.

   Source: [[https://github.com/howardabrams/dot-files/blob/master/emacs-javascript.org][howardabrams' dotfiles]]

   #+BEGIN_SRC emacs-lisp
     (use-package tern
       :ensure t
       :after js2-mode
       :init
       (add-hook 'js2-mode-hook (lambda () (tern-mode)))
       :config
       ;; (define-key tern-mode-keymap (kbd "M-.") nil)
       ;; (define-key tern-mode-keymap (kbd "M-,") nil)
       (use-package company-tern
         :ensure t
         :init (add-to-list 'company-backends 'company-tern)))
   #+END_SRC

   Use =prettier-js= for code formatting. Make sure =prettier= is installed globally.

   #+BEGIN_SRC emacs-lisp
     (use-package prettier-js
       :ensure t
       :after js2-mode
       :hook ((js2-mode . prettier-js-mode)))
   #+END_SRC

** Lean

   Support for the Lean theorem prover.

   #+BEGIN_SRC emacs-lisp
     (use-package lean-mode
       :ensure t
       :defer t
       :custom
       (lean-rootdir "~/lean-3.4.0-darwin"))

     (use-package company-lean
       :ensure t
       :defer t)

     (use-package helm-lean
       :ensure t
       :defer t)
   #+END_SRC

** Lisps

   Enable =paredit=.

   #+BEGIN_SRC emacs-lisp
     ;; (use-package paredit
     ;;   :ensure t
     ;;   :commands (enable-paredit-mode paredit-mode)
     ;;   :diminish paredit-mode
     ;;   :init
     ;;   (add-hook 'clojure-mode-hook #'paredit-mode)
     ;;   (add-hook 'cider-mode-hook #'paredit-mode))
   #+END_SRC

   Use =evil-paredit= for =paredit= to work nicely with =evil-mode=.

   #+BEGIN_SRC emacs-lisp
     ;; (use-package evil-paredit
     ;;   :ensure t
     ;;   :commands (evil-paredit-mode))
   #+END_SRC

   Use =smartparens= and =evil-smartparens=.

   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :diminish
       :init
       (require 'smartparens-config)
       (smartparens-global-mode 1)
       :config
       (defun my-create-newline-and-enter-sexp (&rest _ignored)
         "Open a new brace or bracket expression, with relevant newlines and indent. "
         (newline)
         (indent-according-to-mode)
         (forward-line -1)
         (indent-according-to-mode))
       (setq sp-escape-quotes-after-insert nil)
       (sp-local-pair 'c++-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
       (sp-local-pair 'c-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
       (sp-local-pair 'java-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
       (sp-local-pair 'web-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
       (sp-local-pair 'typescript-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
       (sp-local-pair 'js-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET"))))

     (use-package evil-smartparens
       :ensure t
       :diminish
       :config
       (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
   #+END_SRC

** Python

   Use the Microsoft Language Server Protocol for Python development.

   Source: this [[https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/][blog post]]

   #+BEGIN_SRC emacs-lisp
     ;; (use-package lsp-mode
     ;;   :ensure t
     ;;   :defer t
     ;;   :config
     ;;   ;; make sure we have lsp-imenu everywhere we have LSP
     ;;   (require 'lsp-imenu)
     ;;   (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
     ;;   ;; get lsp-python-enable defined
     ;;   ;; NB: use either projectile-project-root or ffip-get-project-root-directory
     ;;   ;;     or any other function that can be used to find the root directory of a project
     ;;   (lsp-define-stdio-client lsp-python "python"
     ;;                            #'projectile-project-root
     ;;                            '("pyls"))

     ;;   ;; make sure this is activated when python-mode is activated
     ;;   ;; lsp-python-enable is created by macro above
     ;;   (add-hook 'python-mode-hook
     ;;             (lambda ()
     ;;               (lsp-python-enable)))

     ;;   ;; lsp extras
     ;;   (use-package lsp-ui
     ;;     :ensure t
     ;;     :defer t
     ;;     :config
     ;;     (setq lsp-ui-sideline-ignore-duplicate t)
     ;;     (add-hook 'lsp-mode-hook 'lsp-ui-mode))

     ;;   (use-package company-lsp
     ;;     :ensure t
     ;;     :defer t
     ;;     :config
     ;;     (push 'company-lsp company-backends)))
   #+END_SRC

   Use =pipenv= to set up Python environments and replace =pip3=.

   #+BEGIN_SRC emacs-lisp
     ;; (use-package pipenv
     ;;   :hook (python-mode . pipenv-mode)
     ;;   :init
     ;;   (setq pipenv-projectile-after-switch-function #'pipenv-projectile-after-switch-extended))
   #+END_SRC

   Use =pyvenv= for virtual environments. This package has to be enabled for =lsp-mode= to work.

   #+BEGIN_SRC emacs-lisp
     (use-package pyvenv
       :ensure t
       :defer t
       :commands
       (pyvenv-activate pyvenv-workon))
   #+END_SRC

   When running python files with =M-x run-python=, make sure the shell is set to iPython.

   #+BEGIN_SRC emacs-lisp
     (setq python-shell-interpreter "ipython")
   #+END_SRC

** Prolog

   Use Prolog mode on files with a .pl extension.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
   #+END_SRC

** Hy

   Lisp + Python

   #+BEGIN_SRC emacs-lisp
     (use-package hy-mode
       :ensure t
       :defer t
       :mode ("\\.hy\\'" . hy-mode)
       :config
       (define-key hy-mode-map "\C-x\C-e" 'hy-shell-eval-last-sexp)
       (setq hy-mode-inferior-lisp-command "hy"))
   #+END_SRC

** OCaml

   Use Merlin and Tuareg to get an IDE experience.

   #+BEGIN_SRC emacs-lisp
     (use-package tuareg-mode
       :config
       (add-hook 'tuareg-mode-hook
                 (lambda()
                   (when (functionp 'prettify-symbols-mode)
                     (prettify-symbols-mode))))
       (add-hook 'tuareg-mode-hook #'(lambda() (setq mode-name "🐫"))))

     (use-package merlin
       :ensure t
       :custom
       (merlin-command 'opam)
       (merlin-completion-with-doc t)
       (company-quickhelp-mode t)
       :bind (:map merlin-mode-map
                   ("M-." . merlin-locate)
                   ("M-," . merlin-pop-stack)
                   ("C-c C-o" . merlin-occurrences)
                   ("C-c C-j" . merlin-jump)
                   ("C-c i" . merlin-locate-ident)
                   ("C-c C-e" . merlin-iedit-occurrences))
       :hook
       (reason-mode . merlin-mode)
       (tuareg-mode . +ocaml-init-merlin-h)
       (caml-mode-hook . merlin-mode)
       :init
       (defun +ocaml-init-merlin-h ()
         "Activate `merlin-mode' if the ocamlmerlin executable exists."
         (when (executable-find "ocamlmerlin")
           (merlin-mode)))
       :config
       (add-hook 'reason-mode-hook (lambda ()
                                     (add-hook 'before-save-hook 'refmt-before-save)
                                     (merlin-mode)))
       ;; Make company aware of merlin
       (with-eval-after-load 'company
         (add-to-list 'company-backends 'merlin-company-backend)))

     (use-package flycheck-ocaml
       :hook (merlin-mode . +ocaml-init-flycheck-h)
       :config
       (defun +ocaml-init-flycheck-h ()
         "Activate `flycheck-ocaml`"
         ;; Disable Merlin's own error checking
         (setq merlin-error-after-save nil)
         ;; Enable Flycheck checker
         (flycheck-ocaml-setup)))

     (use-package merlin-eldoc
       :hook (merlin-mode . merlin-eldoc-setup))

     (use-package merlin-imenu
       :hook (merlin-mode . merlin-use-merlin-imenu))

     (use-package ocamlformat
       :commands ocamlformat
       :hook (tuareg-mode . +ocaml-init-ocamlformat-h)
       :config

       (defun +ocaml-init-ocamlformat-h ()
         (when (and (executable-find "ocamlformat")
                    (locate-dominating-file default-directory ".ocamlformat"))
           (add-hook 'tuareg-mode-hook (lambda ()
                                         (define-key tuareg-mode-map (kbd "C-M-<tab>") #'ocamlformat)
                                         (add-hook 'before-save-hook #'ocamlformat-before-save))))))

     (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
       (when (and opam-share (file-directory-p opam-share))
         (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
         (autoload 'merlin-mode "merlin" nil t nil)
         (add-hook 'tuareg-mode-hook 'merlin-mode t)
         (add-hook 'caml-mode-hook 'merlin-mode t)))
   #+END_SRC

** ReasonML

   ReasonML seems like a promising new language from Facebook that might make JavaScript less annoying.

   Some initial setup.

   #+BEGIN_SRC emacs-lisp
     (defun shell-cmd (cmd)
       "Returns the stdout output of a shell command or nil if the command returned
        an error"
       (car (ignore-errors (apply 'process-lines (split-string cmd)))))

     (defun reason-cmd-where (cmd)
       (let ((where (shell-cmd cmd)))
         (if (not (string-equal "unknown flag ----where" where))
             where)))

   #+END_SRC

   Set up the packages.

   #+BEGIN_SRC emacs-lisp
     (use-package reason-mode
       :ensure t
       :config
       (let* ((refmt-bin (or (reason-cmd-where "refmt ----where")
                             (shell-cmd "which refmt")))
              (merlin-bin (or (reason-cmd-where "ocamlmerlin ----where")
                              (shell-cmd "which ocamlmerlin")))
              (merlin-base-dir (when merlin-bin
                                 (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
         ;; Add merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
         (when merlin-bin
           (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
           (setq merlin-command merlin-bin))

         (when refmt-bin
           (setq refmt-command refmt-bin))))

   #+END_SRC

   Add =eldoc= support.

   #+BEGIN_SRC emacs-lisp
     ;; (use-package merlin-eldoc
     ;;   :ensure t
     ;;   :after merlin
     ;;   :custom
     ;;   (eldoc-echo-area-use-multiline-p t) ; use multiple lines when necessary
     ;;   (merlin-eldoc-max-lines 8)          ; but not more than 8
     ;;   :bind (:map merlin-mode-map
     ;;               ("C-c m p" . merlin-eldoc-jump-to-prev-occurrence)
     ;;               ("C-c m n" . merlin-eldoc-jump-to-next-occurrence))
     ;;   :hook ((reason-mode tuareg-mode caml-mode) . merlin-eldoc-setup))
   #+END_SRC

   Add =flycheck= support.

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-ocaml
       :ensure t
       :config
       (add-hook 'tuareg-mode-hook
                 (lambda ()
                   ;; disable Merlin's own error checking
                   (setq-local merlin-error-after-save nil)
                   ;; enable Flycheck checker
                   (flycheck-ocaml-setup))))
   #+END_SRC

   Support the =utop= REPL in Emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package utop
       :config
       (defun utop-opam-utop ()
         (progn
           (setq-local utop-command "opam config exec -- utop -emacs")
           'utop-minor-mode))
       (defun reason/rtop-prompt ()
         "The rtop prompt function."
         (let ((prompt (format "rtop[%d]> " utop-command-number)))
           (add-text-properties 0 (length prompt) '(face utop-prompt) prompt)
           prompt))
       (defun utop-reason-cli-rtop ()
         (progn
           (setq-local utop-command (concat (shell-cmd "which rtop") " -emacs"))
           (setq-local utop-prompt 'reason/rtop-prompt)
           'utop-minor-mode))
       :hook
       (tuareg-mode . utop-opam-utop)
       (reason-mode . utop-reason-cli-rtop))
   #+END_SRC

* Org-mode
** General Settings

   Use bullets instead of asterisks.

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :defer t
       :init
       (add-hook 'org-mode-hook #'org-bullets-mode))
   #+END_SRC

   Use a little downward-pointing arrow instead of the usual ellipsis that org displays when there’s stuff under a header.

   #+BEGIN_SRC emacs-lisp
     (setq org-ellipsis "⤵")
   #+END_SRC

   Use syntax highlighting in source blocks while editing.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC

   Make TAB act as if it were issued in a buffer of the language’s major mode.

   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
   #+END_SRC

   When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).

   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
   #+END_SRC

   Enable spellchecking in org-mode.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'flyspell-mode)
   #+END_SRC

   Don't change the font height of headers.

   #+BEGIN_SRC emacs-lisp
     ;; (defun my/org-mode-hook ()
     ;;   (dolist (face '(org-level-1
     ;;                   org-level-2
     ;;                   org-level-3
     ;;                   org-level-4
     ;;                   org-level-5))
     ;;     (set-face-attribute face nil :weight 'semi-bold :height 1.1)))

     ;; (add-hook 'org-mode-hook 'my/org-mode-hook)
   #+END_SRC

   Set up refile targets.

   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets '((nil :maxlevel . 1)
                                (org-agenda-files :maxlevel . 1)))
   #+END_SRC

   Always start in visual-line-mode (soft line wrapping).

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'visual-line-mode)
   #+END_SRC

** Task Management

   Store org files in Dropbox.

   #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/Dropbox/org/")
   #+END_SRC

   Setup the global TODO list.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c a") 'org-agenda)
     (setq org-agenda-show-log t)
   #+END_SRC

   Record the time a TODO was archived.

   #+BEGIN_SRC emacs-lisp
     (setq org-log-done 'time)
   #+END_SRC

   Create functions to open my tasks and another to open my homework. Called with =M-x RET tasks RET= or =M-x RET homework RET=.
   Source: [[https://github.com/munen/emacs.d/#general-configuration]]

   #+BEGIN_SRC emacs-lisp
     (defun set-org-agenda-files ()
       "Set different org-files to be used in org-agenda"
       (setq org-agenda-files (list (concat org-directory "tasks.org")
                                    (concat org-directory "refile-beorg.org")
                                    (concat org-directory "homework.org"))))

     (set-org-agenda-files)

     (defun tasks ()
       "Open main tasks file and start 'org-agenda' for this week."
       (interactive)
       (find-file (concat org-directory "tasks.org"))
       (set-org-agenda-files)
       (org-agenda-list)
       (org-agenda-week-view)
       (shrink-window-if-larger-than-buffer)
       (other-window 1))

     (defun homework ()
       "Open homework file and start 'org-agenda' for this week."
       (interactive)
       (find-file (concat org-directory "homework.org"))
       (set-org-agenda-files)
       (org-agenda-list)
       (org-agenda-week-view)
       (shrink-window-if-larger-than-buffer)
       (other-window 1))
   #+END_SRC

** Capture

   Set up capture.

   #+BEGIN_SRC emacs-lisp
     (setq org-default-notes-file (concat org-directory "/tasks.org"))
     (define-key global-map "\C-cc" 'org-capture)
   #+END_SRC

** Evil mode bindings

   Use evil mode keybindings in org-mode.

   #+BEGIN_SRC emacs-lisp
     (use-package evil-org
       :ensure t
       :after org
       :diminish evil-org-mode
       :config
       (add-hook 'org-mode-hook 'evil-org-mode)
       (add-hook 'evil-org-mode-hook
                 (lambda ()
                   (evil-org-set-key-theme)))
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))
   #+END_SRC

** Exporting

   Change straight quotes to curly quotes when exporting.

   #+BEGIN_SRC emacs-lisp
     (setq org-export-with-smart-quotes t)
   #+END_SRC

   Don’t include a footer with my contact and publishing information at the bottom of every exported HTML document.

   #+BEGIN_SRC emacs-lisp
     (setq org-html-postamble nil)
   #+END_SRC

   Set the Emacs browser to the default MacOS browser.

   #+BEGIN_SRC emacs-lisp
     (setq browse-url-browser-function 'browse-url-default-macosx-browser)
   #+END_SRC

   Produce pdfs with syntax highlighting with =minted=.

   #+BEGIN_SRC emacs-lisp
     ;; (setq org-latex-pdf-process
     ;;       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
     (setq org-latex-pdf-process '("xelatex -shell-escape %f" "biber %b" "xelatex -shell-escape %f" "xelatex -shell-escape %f"))
     (setq bibtex-dialect 'biblatex)
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-latex-listings 'minted)
   #+END_SRC

** PDFs

   Use =pdftools= to view PDF files.

   Found this [[https://github.com/politza/pdf-tools/issues/18#issuecomment-304429580][GitHub issue]] that uses bookmarks to remember location in PDFs.

   #+BEGIN_SRC emacs-lisp
     (use-package tablist
       :ensure t)

     (use-package pdf-tools
       :load-path (lambda () (expand-file-name "bin/pdf-tools-20180428.827/"))
       :pin manual
       :magic ("%PDF" . pdf-view-mode)
       :init
       (pdf-tools-install)
       :config
       (custom-set-variables
        '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
       (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
       (setq pdf-view-display-size 'fit-width
             pdf-view-use-scaling t
             pdf-view-resize-factor 1.25)
       (setq pdf-annot-activate-created-annotations t)

       (defun my/pdf-set-last-viewed-bookmark ()
         (interactive)
         (when (eq major-mode 'pdf-view-mode)
           (bookmark-set (my/pdf-generate-bookmark-name))))

       (defun my/pdf-jump-last-viewed-bookmark ()
         (bookmark-set "fake")
         (when
             (my/pdf-has-last-viewed-bookmark)
           (bookmark-jump (my/pdf-generate-bookmark-name))))

       (defun my/pdf-has-last-viewed-bookmark ()
         (assoc
          (my/pdf-generate-bookmark-name) bookmark-alist))

       (defun my/pdf-generate-bookmark-name ()
         (concat "PDF-LAST-VIEWED: " (buffer-file-name)))

       (defun my/pdf-set-all-last-viewed-bookmarks ()
         (dolist (buf (buffer-list))
           (with-current-buffer (and (buffer-name buf) buf)
             (my/pdf-set-last-viewed-bookmark))))

       (add-hook 'kill-buffer-hook 'my/pdf-set-last-viewed-bookmark)
       (add-hook 'pdf-view-mode-hook 'my/pdf-jump-last-viewed-bookmark)
       (unless noninteractive  ; as `save-place-mode' does
         (add-hook 'kill-emacs-hook #'my/pdf-set-all-last-viewed-bookmarks)))
   #+END_SRC

   Use =org-pdfview= to integrate =pdf-tools= with org-mode.

   Source: [[https://github.com/stardiviner/emacs.d/blob/199597132ef58ff6b260f6d6c3f1283bd7f2085a/init/Emacs/init-emacs-pdf.el][this GitHub repo]]

   #+BEGIN_SRC emacs-lisp
     (use-package org-pdfview
       :ensure t
       :defer t
       :init
       (org-link-set-parameters "pdfview" :export #'org-pdfview-export)
       (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
       (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" . (lambda (file link) (org-pdfview-open link)))))
   #+END_SRC
** Org-ref

   Manage citations in org-mode.

   #+BEGIN_SRC emacs-lisp
     (use-package org-ref
       :ensure t
       :defer t
       :config
       (setq reftex-default-bibliography '("~/Documents/Second_Year/RELG3559/paper1/bibliography.bib"))
       (setq bibtex-completion-bibliography "~/Documents/Second_Year/RELG3559/paper1/bibliography.bib"))
   #+END_SRC

** Org Babel

   Execute code in org-mode.

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (emacs-lisp . t)
        (C . t)
        (lisp . t)
        (js . t)))

     (setq org-babel-python-command "python3")
   #+END_SRC

* Ivy/Counsel/Swiper

  Use Ivy as the completion framework. It's faster and more lightweight than Helm.

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (setq ivy-height 10)
      (setq ivy-count-format "")
      (setq ivy-initial-inputs-alist nil)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t)
  #+END_SRC

  Use a more friendly interface for ivy.

  #+BEGIN_SRC emacs-lisp
    (use-package ivy-rich
      :ensure t
      :init
      (ivy-rich-mode 1)
      :config
      '(counsel-M-x
        (:columns
         ((counsel-M-x-transformer (:width 40))  ; the original transfomer
          (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
        counsel-describe-function
        (:columns
         ((counsel-describe-function-transformer (:width 40))  ; the original transformer
          (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the function
        counsel-describe-variable
        (:columns
         ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
          (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))  ; return the docstring of the variable
        counsel-recentf
        (:columns
         ((ivy-rich-candidate (:width 0.8)) ; return the candidate itself
          (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))))) ; return the last modified time of the file
  #+END_SRC

  Add all-the-icons to ivy.

  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons-ivy
      :ensure t
      :config
      (all-the-icons-ivy-setup))
  #+END_SRC

* Hydra

  Use hydras in combination with evil-mode for modal editing on steroids.

  Source: [[https://gist.github.com/Schroedingberg/ef59e71e21bd1e18f13c21d0ba4b5ce0][this Github Gist]] and [[https://www.reddit.com/r/emacs/comments/931la6/tip_how_to_adopt_flycheck_as_your_new_best_friend/][this Reddit post]]

  #+BEGIN_SRC emacs-lisp
    (use-package hydra
      :ensure t
      :after evil-leader
      :init
      (evil-leader/set-key (kbd "s")
        (defhydra hydra-smartparens (:hint nil)
          "
          ^Nav^            ^Barf/Slurp^                 ^Depth^
          ^───^────────────^──────────^─────────────────^─────^────────────────
          _f_: forward     _→_:          slurp forward   _s_: splice
          _b_: backward    _←_:          barf forward    _R_: raise
          _u_: backward ↑  _C-<right>_:  slurp backward  _↑_: raise backward
          _d_: forward ↓   _C-<left>_:   barf backward   _↓_: raise forward
          _p_: backward ↓
          _n_: forward ↑

          ^Kill^           ^Misc^                       ^Wrap^
          ^────^───────────^────^───────────────────────^────^─────────────────
          _w_: copy        _j_: join                    _(_: wrap with ( )
          _k_: kill        _S_: split                   _{_: wrap with { }
          ^^               _t_: transpose               _'_: wrap with ' '
          ^^               _c_: convolute               _\"_: wrap with \" \"
          ^^               _i_: indent defun            _r_: rewrap
          "
          ("q" nil)
          ;; Wrapping
          ("(" (lambda (_) (interactive "P") (sp-wrap-with-pair "(")))
          ("{" (lambda (_) (interactive "P") (sp-wrap-with-pair "{")))
          ("'" (lambda (_) (interactive "P") (sp-wrap-with-pair "'")))
          ("\"" (lambda (_) (interactive "P") (sp-wrap-with-pair "\"")))
          ("r" sp-rewrap-sexp)
          ;; Navigation
          ("f" sp-forward-sexp )
          ("b" sp-backward-sexp)
          ("u" sp-backward-up-sexp)
          ("d" sp-down-sexp)
          ("p" sp-backward-down-sexp)
          ("n" sp-up-sexp)
          ;; Kill/copy
          ("w" sp-copy-sexp)
          ("k" sp-kill-sexp)
          ;; Misc
          ("t" sp-transpose-sexp)
          ("j" sp-join-sexp)
          ("S" sp-split-sexp)
          ("c" sp-convolute-sexp)
          ("i" sp-indent-defun)
          ;; Depth changing
          ("s" sp-splice-sexp)
          ("R" sp-splice-sexp-killing-around)
          ("<up>" sp-splice-sexp-killing-backward)
          ("<down>" sp-splice-sexp-killing-forward)
          ;; Barfing/slurping
          ("<right>" sp-forward-slurp-sexp)
          ("<left>" sp-forward-barf-sexp)
          ("C-<left>" sp-backward-barf-sexp)
          ("C-<right>" sp-backward-slurp-sexp)))
      (evil-leader/set-key (kbd "f")
        (defhydra hydra-flycheck (:color blue :hint nil)
          "
          ^
          ^Flycheck^          ^Errors^            ^Checker^
          ^────────^──────────^──────^────────────^───────^─────
          _q_ quit            _<_ previous        _?_ describe
          _M_ manual          _>_ next            _d_ disable
          _v_ verify setup    _f_ check           _m_ mode
          ^^                  _l_ list            _s_ select
          ^^                  ^^                  ^^
          "
          ("q" nil)
          ("<" flycheck-previous-error :color pink)
          (">" flycheck-next-error :color pink)
          ("?" flycheck-describe-checker)
          ("M" flycheck-manual)
          ("d" flycheck-disable-checker)
          ("f" flycheck-buffer)
          ("l" flycheck-list-errors)
          ("m" flycheck-mode)
          ("s" flycheck-select-checker)
          ("v" flycheck-verify-setup))))
  #+END_SRC

* Prose
** LaTeX

   I rarely have to write in actual LaTeX since org-mode works for 90% of my use-cases, but it's handy.

   Source: [[https://github.com/rememberYou/.emacs.d/blob/master/config.org#latex][rememberYou's config]]

   #+BEGIN_SRC emacs-lisp
     (use-package tex
       :ensure auctex
       :hook (LaTeX-mode . reftex-mode)
       :custom
       (TeX-PDF-mode t)
       (TeX-auto-save t)
       (TeX-byte-compile t)
       (TeX-clean-confirm nil)
       (TeX-master 'dwim)
       (TeX-parse-self t)
       (TeX-source-correlate-mode t)
       (TeX-view-program-selection '((output-pdf "open")
                                     (output-html "xdg-open"))))

     (use-package bibtex
       :after auctex
       :hook (bibtex-mode . my/bibtex-fill-column)
       :preface
       (defun my/bibtex-fill-column ()
         "Ensures that each entry does not exceed 120 characters."
         (setq fill-column 120)))

     (use-package company-auctex
       :after (auctex company)
       :config (company-auctex-init))

     (use-package company-math :after (auctex company))
   #+END_SRC

   =xelatex= supports Unicode and is generally better than =pdflatex=.

   #+BEGIN_SRC emacs-lisp
     (setq-default TeX-engine 'xetex)
   #+END_SRC

   Support citations and other references in LaTeX.

   #+BEGIN_SRC emacs-lisp
     (use-package reftex :after auctex)
   #+END_SRC

** Linting

   Use =proselint=.

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :diminish
       :config
       (flycheck-define-checker proselint
         "A linter for prose."
         :command ("proselint" source-inplace)
         :error-patterns
         ((warning line-start (file-name) ":" line ":" column ": "
                   (id (one-or-more (not (any " "))))
                   (message (one-or-more not-newline)
                            (zero-or-more "\n" (any " ") (one-or-more not-newline)))
                   line-end))
         :modes (text-mode markdown-mode gfm-mode org-mode))
       (add-to-list 'flycheck-checkers 'proselint))
   #+END_SRC

   Use =flycheck= in the appropriate buffer.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'markdown-mode-hook #'flycheck-mode)
     (add-hook 'gfm-mode-hook #'flycheck-mode)
     (add-hook 'text-mode-hook #'flycheck-mode)
     (add-hook 'org-mode-hook #'flycheck-mode)
   #+END_SRC

   Use =flyspell= when writing LaTeX.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'tex-mode-hook #'flyspell-mode)
   #+END_SRC

   Set spell checker to =aspell=.

   #+BEGIN_SRC emacs-lisp
     (setq ispell-program-name "/usr/local/bin/aspell")
   #+END_SRC

   Write good.

   #+BEGIN_SRC emacs-lisp
     (use-package writegood-mode
       :ensure t
       :hook ((markdown-mode . writegood-mode)
              (tex-mode . writegood-mode)
              (text-mode . writegood-mode)
              (org-mode . writegood-mode)))
   #+END_SRC

** Thesaurus

   Use =synosaurus= as a nice interface to =wordnet=. I installed =wordnet= with =brew install wordnet=.
   The default bindings conflict with =org-mode= so I had to change them.

   #+BEGIN_SRC emacs-lisp
     (use-package synosaurus
       :ensure t
       :defer t
       :bind
       (("C-c C-h l" . synosaurus-lookup)
        ("C-c C-h r" . synosaurus-choose-and-replace))
       :config
       (setq synosaurus-backend 'synosaurus-backend-wordnet)
       (setq synosaurus-choose-method 'default))
   #+END_SRC

** Typography

   Use =typo-mode= to easily type typographical symbols such as the em-dash.

   #+BEGIN_SRC emacs-lisp
     (use-package typo
       :defer t
       :diminish
       :config
       (typo-global-mode 1)
       (add-hook 'text-mode-hook 'typo-mode))
   #+END_SRC

** Theme

   Use the poet theme for writing prose.

   #+BEGIN_SRC emacs-lisp
     (use-package poet-theme
       :ensure t
       :defer t
       :hook ((text-mode-hook . variable-pitch-mode)
              (org-mode-hook . variable-pitch-mode))
       :config
       (set-face-attribute 'default nil :family "Fira Code" :height 130)
       (set-face-attribute 'fixed-pitch nil :family "Fira Code")
       (set-face-attribute 'variable-pitch nil :family "Baskerville"))
   #+END_SRC

* Email

  [[https://notanumber.io/2016-10-03/better-email-with-mu4e/][This post]] was super helpful for setting everything up.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
    (require 'mu4e)

    (setq mu4e-maildir (expand-file-name "~/Maildir"))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-change-filenames-when-moving t) ;; fix for mbsync
    ;; Enable inline images.
    (setq mu4e-view-show-images t)
    (setq mu4e-view-image-max-width 800)
    ;; Use imagemagick, if available.
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
  #+END_SRC

  Show email addresses as well as names.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-view-show-addresses t)
  #+END_SRC

  Open email in a browser if necessary.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser) t)
  #+END_SRC

  Enable images in w3m.

  Source: [[https://emacs.stackexchange.com/questions/41691/mu4e-display-inline-images-in-html-emails][Emacs StackExchange]]

  #+BEGIN_SRC emacs-lisp
    (setq w3m-default-desplay-inline-images t)
    (defun mu4e-action-view-in-w3m ()
      "View the body of the message in emacs w3m."
      (interactive)
      (w3m-browse-url (concat "file://"
                              (mu4e~write-body-to-html (mu4e-message-at-point t)))))
  #+END_SRC

  This hook correctly modifies the \Inbox and \Starred flags on email when they are marked to trigger the appropriate Gmail actions.

  #+BEGIN_SRC emacs-lisp
    (add-hook 'mu4e-mark-execute-pre-hook
              (lambda (mark msg)
                (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
                      ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
                      ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))
  #+END_SRC

  Define helper functions.

  #+BEGIN_SRC emacs-lisp
    (defun mu4e-message-maildir-matches (msg rx)
      "Determine which account context I am in based on the maildir subfolder"
      (when rx
        (if (listp rx)
            ;; If rx is a list, try each one for a match
            (or (mu4e-message-maildir-matches msg (car rx))
                (mu4e-message-maildir-matches msg (cdr rx)))
          ;; Not a list, check rx
          (string-match rx (mu4e-message-field msg :maildir)))))

    (defun choose-msmtp-account ()
      "Choose account label to feed msmtp -a option based on From header
      in Message buffer; This function must be added to
      message-send-mail-hook for on-the-fly change of From address before
      sending message since message-send-mail-hook is processed right
      before sending message."
      (if (message-mail-p)
          (save-excursion
            (let*
                ((from (save-restriction
                         (message-narrow-to-headers)
                         (message-fetch-field "from")))
                 (account
                  (cond
                   ((string-match "samarthkishor1@gmail.com" from) "gmail")
                   ((string-match "sk4gz@virginia.edu" from) "uva"))))
              (setq message-sendmail-extra-arguments (list '"-a" account))))))
  #+END_SRC

  Use spellcheck when composing an email.

  #+BEGIN_SRC emacs-lisp
    (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  #+END_SRC

  Define email contexts for my personal and school accounts.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "gmail"
               :enter-func (lambda () (mu4e-message "Switch to the gmail context"))
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-maildir-matches msg "^/gmail")))
               :leave-func (lambda () (mu4e-clear-caches))
               :vars '((user-mail-address     . "samarthkishor1@gmail.com")
                       (user-full-name        . "Samarth Kishor")
                       (mu4e-sent-folder      . "/gmail/sent")
                       (mu4e-drafts-folder    . "/gmail/drafts")
                       (mu4e-trash-folder     . "/gmail/trash")
                       (mu4e-refile-folder    . "/gmail/[Gmail].All Mail")))
             ,(make-mu4e-context
               :name "uva"
               :enter-func (lambda () (mu4e-message "Switch to the UVA context"))
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-maildir-matches msg "^/uva")))
               :leave-func (lambda () (mu4e-clear-caches))
               :vars '((user-mail-address     . "sk4gz@virginia.edu")
                       (user-full-name        . "Samarth Kishor")
                       (mu4e-sent-folder      . "/uva/sent")
                       (mu4e-drafts-folder    . "/uva/drafts")
                       (mu4e-trash-folder     . "/uva/trash")
                       (mu4e-refile-folder    . "/uva/[Gmail].All Mail")))))
  #+END_SRC

  =mu4e= freezes in header mode sometimes because of font ligatures. This should fix that.

  Source: [[https://github.com/tonsky/FiraCode/issues/158][Fira Code Github issues]]

  #+BEGIN_SRC emacs-lisp
    (add-hook 'mu4e-headers-mode-hook
              (lambda ()
                (setq-local auto-composition-mode nil)))
  #+END_SRC

  Gmail already sends sent mail to the Sent folder.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-sent-messages-behavior 'delete)
  #+END_SRC

  View and compose email in =visual-line-mode= and use the =visual-fill-column= package to have soft-wrapped lines.

  #+BEGIN_SRC emacs-lisp
    (use-package visual-fill-column
      :ensure t)

    (add-hook 'mu4e-view-mode-hook #'visual-line-mode)
    (add-hook 'mu4e-compose-mode-hook
              (lambda ()
                (set-fill-column 80)
                (auto-fill-mode 0)
                (visual-fill-column-mode)
                (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
                (visual-line-mode)))
  #+END_SRC

  Handle html emails and preserve links.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum)

    (require 'mu4e-contrib)
    (setq mu4e-html2text-command 'mu4e-shr2text)
    (add-hook 'mu4e-view-mode-hook
              (lambda()
                ;; try to emulate some of the eww key-bindings
                (local-set-key (kbd "<tab>") 'shr-next-link)
                (local-set-key (kbd "<backtab>") 'shr-previous-link)))
  #+END_SRC

** Send mail with =msmtp=

   #+BEGIN_SRC emacs-lisp
     (setq message-send-mail-function 'message-send-mail-with-sendmail)
     (setq sendmail-program "/usr/local/bin/msmtp")
     (setq user-full-name "Samarth Kishor")

                                             ; tell msmtp to choose the SMTP server according to the "from" field in the outgoing email
     (setq message-sendmail-envelope-from 'header)
     (add-hook 'message-send-mail-hook 'choose-msmtp-account)
     ;; (setq message-sendmail-f-is-evil 't)
   #+END_SRC

** Integrate with org-mode

   Use =org-mu4e= to store org-mode links to emails. Store a link to the message if in the header view.
   Convert the message to HTML if composed in org-mode with =org-mu4e-compose-org-mode=.

   Source: [[http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/][Pragmatic Emacs]]

   #+BEGIN_SRC emacs-lisp
     (require 'org-mu4e)
     (setq org-mu4e-link-query-in-headers-mode nil)
     (setq org-mu4e-convert-to-html t)
   #+END_SRC

   Update the org-mode capture template to work with emails.

   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
           `(("t" "TODO" entry (file+headline "~/Dropbox/org/tasks.org" "Tasks")
              "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))
   #+END_SRC

* Finances

  Apparently Emacs can also handle budgets.

  Source: [[https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money/][this Reddit post]]

  #+BEGIN_SRC emacs-lisp
    (use-package ledger-mode
      :mode ("\\.dat\\'"
             "\\.ledger\\'")
      :bind (:map ledger-mode-map
                  ("C-x C-s" . my/ledger-save))
      :preface
      (defun my/ledger-save ()
        "Automatically clean the ledger buffer at each save."
        (interactive)
        (save-excursion
          (when (buffer-modified-p)
            (with-demoted-errors (ledger-mode-clean-buffer))
            (save-buffer))))
      :custom (ledger-clear-whole-transactions t))
  #+END_SRC

  Use company for auto-completion.

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck-ledger
      :after ledger-mode)
  #+END_SRC

* RSS Feeds

  =elfeed= is a good RSS feed reader. I used to use =newsboat= but this might be a bit more powerful.

  Source: [[http://cestlaz.github.io/posts/using-emacs-31-elfeed-3/][Using Emacs]]

  #+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :ensure t
      :after hydra
      :bind (:map elfeed-search-mode-map
                  ("h" . mz/make-and-run-elfeed-hydra))
      :config
      (setq shr-max-image-proportion 0.6)
      (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
      (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
      (defun z/hasCap (s) ""
             (let ((case-fold-search nil))
               (string-match-p "[[:upper:]]" s)))
      (defun z/get-hydra-option-key (s)
        "Return single upper case letter (converted to lower) or first"
        (interactive)
        (let ((loc (z/hasCap s)))
          (if loc
              (downcase (substring s loc (+ loc 1)))
            (substring s 0 1))))
      (defun mz/make-elfeed-cats (tags)
        "Return a list of lists. Each one is line for the hydra configuration in the form
           (c function hint)"
        (interactive)
        (mapcar (lambda (tag)
                  (let* ((tagstring (symbol-name tag))
                         (c (z/get-hydra-option-key tagstring)))
                    (list c (append '(elfeed-search-set-filter) (list (format "@3-weeks-ago +%s" tagstring)))
                          tagstring)))
                tags))
      (defmacro mz/make-elfeed-hydra ()
        `(defhydra mz/hydra-elfeed ()
           "filter"
           ,@(mz/make-elfeed-cats (elfeed-db-get-all-tags))
           ("*" (elfeed-search-set-filter "@3-weeks-ago +star") "Starred")
           ("M" elfeed-toggle-star "Mark")
           ("A" (elfeed-search-set-filter "@3-weeks-ago") "All")
           ("T" (elfeed-search-set-filter "@1-day-ago") "Today")
           ("q" nil "quit" :color blue)))
      (defun mz/make-and-run-elfeed-hydra ()
        "Redefine the hydra whenever needed"
        (interactive)
        (mz/make-elfeed-hydra)
        (mz/hydra-elfeed/body)))

    (use-package elfeed-goodies
      :ensure t
      :config
      (elfeed-goodies/setup))

    (use-package elfeed-org
      :ensure t
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/.emacs.d/feeds.org")))
  #+END_SRC
