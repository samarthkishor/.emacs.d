#+TITLE: Emacs Configuration
#+AUTHOR: Samarth Kishor
#+OPTIONS: toc:nil num:nil

* Use =use-package=

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
          (package-refresh-contents)
          (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (eval-when-compile
      (require 'use-package))
#+END_SRC

* Personal Information

Name and email.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Samarth Kishor"
        user-mail-address "samarthkishor1@gmail.com")
#+END_SRC

* =evil-mode=

Don't expand abbreviations when I hit escape.

#+BEGIN_SRC emacs-lisp
  (setq evil-want-abbrev-expand-on-insert-exit nil)
#+END_SRC

Use =evil=.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration nil)
    (setq evil-want-fine-undo t)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC

Enable =M-x= in evil-mode.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'execute-extended-command)
#+END_SRC

Bind =C-p= to fuzzy-finding files in the current project.

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
#+END_SRC

Scroll by visual line.

#+BEGIN_SRC emacs-lisp
  (evil-define-key nil evil-normal-state-map
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line)
#+END_SRC

Change sentence (marked by a period) ending from one space to two spaces. This mostly fixes evil-mode sentence motions.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
  (define-key evil-normal-state-map ")" 'forward-sentence)
#+END_SRC

Disable the q key in normal mode since Emacs quits things with q.

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "q") nil)
#+END_SRC

Use =evil-nerd-commenter= to make commenting lines easier.

#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :requires (evil))
#+END_SRC

Use =evil-leader= to emulate leader key functionality. Set , as the leader key.

Note: the window movement keys correspond to hjkl in the Colemak layout.

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :after evil-nerd-commenter
    :commands (evil-leader-mode)
    :ensure evil-leader
    :demand evil-leader
    :init
    (setq evil-leader/in-all-states 1)
    (global-evil-leader-mode)
    :config
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      "h"  'evil-window-left
      "n"  'evil-window-bottom
      "e"  'evil-window-up
      "i"  'evil-window-right
      ","  'evilnc-comment-operator
      "cc" 'evilnc-comment-or-uncomment-lines
      "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
      "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
      "cy" 'evilnc-copy-and-comment-lines
      "cp" 'evilnc-comment-or-uncomment-paragraphs
      "cr" 'comment-or-uncomment-region
      "cv" 'evilnc-toggle-invert-comment-line-by-line
      "."  'evilnc-copy-and-comment-operator))
#+End_SRC

Use =evil-surround= to emulate =surround.vim=.

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC

* UI Preferences
** Tweak window settings

Hide the scroll, tool, and menu bars. hello world.

#+BEGIN_SRC emacs-lisp
  (if window-system (scroll-bar-mode -1))
  (tool-bar-mode 0)
  (menu-bar-mode 0)
#+END_SRC

Start in full-screen.

#+BEGIN_SRC emacs-lisp
  (if (eq window-system 'ns)
      (toggle-frame-maximized)
    (toggle-frame-fullscreen))
#+END_SRC

Set the theme as a "safe theme".

#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
#+END_SRC

Make the titlebar dark on macOS.

Source: [[https://huytd.github.io/emacs-from-scratch.html#orge3a802f][Emacs from scratch]]

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)
#+END_SRC

** Remove startup screen

It gets annoying after a while.

#+BEGIN_SRC emacs-lisp
  (setq-default inhibit-startup-screen t)
#+END_SRC

** Mode line

Display the time in the mode-line.

#+BEGIN_SRC emacs-lisp
  (display-time-mode t)

  ;; Time format
  (customize-set-variable 'display-time-string-forms
                          '((propertize (concat dayname
                                                " " 12-hours ":" minutes " " (upcase am-pm))
                                        'help-echo (format-time-string "%a, %b %e %Y" now))))

  ;; Update display-time-string
  (display-time-update)
#+END_SRC

Use =telephone-line= for the mode-line.

#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :config
    (setq telephone-line-primary-left-separator 'telephone-line-utf-abs-left
          telephone-line-secondary-left-separator 'telephone-line-utf-abs-hollow-left
          telephone-line-primary-right-separator 'telephone-line-utf-abs-right
          telephone-line-secondary-right-separator 'telephone-line-utf-abs-hollow-right)
    (setq telephone-line-height 24
          telephone-line-evil-use-short-tag t)

    (setq telephone-line-lhs
          '((evil   . (telephone-line-evil-tag-segment))
            (accent . (telephone-line-airline-position-segment
                       telephone-line-process-segment))
            (nil    . (telephone-line-minor-mode-segment
                       telephone-line-buffer-segment))))
    (setq telephone-line-rhs
          '((nil    . (telephone-line-misc-info-segment))
            (evil   . (telephone-line-vc-segment))
            (accent . (telephone-line-major-mode-segment
                       telephone-line-flycheck-segment))))

    (telephone-line-mode t))
#+END_SRC

Configure the mode-line.
Source: [[https://github.com/xiongtx/.emacs.d/blob/347d9990a394fbcb222e4cda9759743e17b1977a/init.org#mode-line][A helpful person]]
[disabled]

#+BEGIN_SRC emacs-lisp
  ;; ;; Remove display-time-string from global-mode-string
  ;; (setq global-mode-string (delq 'display-time-string global-mode-string))

  ;; ;; Remove battery-mode-line-string from global-mode-string
  ;; (setq global-mode-string (delq 'battery-mode-line-string global-mode-string))

  ;; (defun *-mode-line-fill (reserve)
  ;;   "Return empty space using FACE and leaving RESERVE space on the right."
  ;;   (unless reserve
  ;;     (setq reserve 20))
  ;;   (when (and window-system
  ;;              (eq 'right (get-scroll-bar-mode)))
  ;;     (setq reserve (- reserve 3)))
  ;;   (propertize " "
  ;;               'display `((space :align-to (- (+ right right-fringe right-margin), reserve)))))

  ;; (setq-default mode-line-format
  ;;               '("%e"
  ;;                 mode-line-front-space
  ;;                 mode-line-client
  ;;                 mode-line-remote
  ;;                 mode-line-mule-info
  ;;                 mode-line-modified
  ;;                 "  "
  ;;                 ;; Buffer name
  ;;                 (:propertize mode-line-buffer-identification
  ;;                              face font-lock-builtin-face)
  ;;                 "  "
  ;;                 ;; Position
  ;;                 "%p (%l,%c)"
  ;;                 "  "
  ;;                 ;; Mode, recursive editing, and narrowing information
  ;;                 "("
  ;;                 (:propertize "%["
  ;;                              face font-lock-warning-face)
  ;;                 mode-name
  ;;                 (:propertize "%]"
  ;;                              face font-lock-warning-face)
  ;;                 (:eval (if (buffer-narrowed-p)
  ;;                            (concat " "
  ;;                                    (propertize "Narrow"
  ;;                                                'face 'font-lock-warning-face))))
  ;;                 ")"
  ;;                 ;; Version control
  ;;                 (:eval (when vc-mode
  ;;                          (concat " "
  ;;                                  vc-mode)))
  ;;                 ;; Miscellaneous information
  ;;                 "  "
  ;;                 mode-line-misc-info
  ;;                 (:eval (*-mode-line-fill (+ (length battery-mode-line-string)
  ;;                                             1
  ;;                                             (length display-time-string))))
  ;;                 battery-mode-line-string
  ;;                 " "
  ;;                 display-time-string
  ;;                 mode-line-end-spaces))

#+End_SRC

Configure the mode-line and use =all-the-icons= for some git branch eye-candy.
I didn't want to include any evil mode status indicators to keep things clean.
[disabled]

#+BEGIN_SRC emacs-lisp
  ;; (use-package all-the-icons
  ;;   :demand
  ;;   :init
  ;;   (progn (defun -custom-modeline-github-vc ()
  ;;            (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
  ;;              (concat
  ;;               (propertize (format " %s" (all-the-icons-octicon "git-branch"))
  ;;                           'face `(:height 1 :family ,(all-the-icons-octicon-family))
  ;;                           'display '(raise 0))
  ;;               (propertize (format " %s" branch))
  ;;               (propertize "  "))))

  ;;          (defun -custom-modeline-svn-vc ()
  ;;            (let ((revision (cadr (split-string vc-mode "-"))))
  ;;              (concat
  ;;               (propertize (format " %s" (all-the-icons-faicon "cloud"))
  ;;                           'face `(:height 1)
  ;;                           'display '(raise 0))
  ;;               (propertize (format " %s" revision) 'face `(:height 0.9)))))

  ;;          (defvar mode-line-my-vc
  ;;            '(:propertize
  ;;              (:eval (when vc-mode
  ;;                       (cond
  ;;                        ((string-match "Git[:-]" vc-mode) (-custom-modeline-github-vc))
  ;;                        ((string-match "SVN-" vc-mode) (-custom-modeline-svn-vc))
  ;;                        (t (format "%s" vc-mode)))))
  ;;              face mode-line-directory)
  ;;            "Formats the current directory's git information in the modeline."))
  ;;   :config
  ;;   (progn
  ;;     (setq-default mode-line-format
  ;;                   (list
  ;;                    "("
  ;;                    "%02l" "," "%02c"
  ;;                    ") "
  ;;                    mode-line-front-space
  ;;                    " "
  ;;                    mode-line-mule-info
  ;;                    mode-line-modified
  ;;                    mode-line-frame-identification
  ;;                    mode-line-buffer-identification
  ;;                    " %6 "
  ;;                    mode-line-modes
  ;;                    mode-line-my-vc
  ;;                    '("  " battery-mode-line-string "  " display-time-string)
  ;;                    ))
  ;;     (concat evil-mode-line-tag)))
#+END_SRC


Get rid of clutter using =diminish=.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
      :ensure t
      :init
      (diminish 'undo-tree-mode)
      (diminish 'auto-revert-mode)
      (diminish 'global-auto-revert-mode)
      (diminish 'flyspell-mode))
#+END_SRC

Don't display the system load average.

#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil)
#+END_SRC

** Disable the bell

#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

Flash the mode-line instead.
Source: [[http://www.stefanom.org/prettify-my-emacs-symbols/]]

#+BEGIN_SRC emacs-lisp
  (defun my-terminal-visible-bell ()
     "A friendlier visual bell effect."
     (invert-face 'mode-line)
     (run-with-timer 0.1 nil 'invert-face 'mode-line))

   (setq visible-bell nil
         ring-bell-function 'my-terminal-visible-bell)
#+END_SRC

** Set the font to Fira Code

It's the best.

#+BEGIN_SRC emacs-lisp
  (when (window-system)
    (set-frame-font "Fira Code 14" nil t))
#+END_SRC

Enable ligatures.

#+BEGIN_SRC emacs-lisp
  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                 (36 . ".\\(?:>\\)")
                 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                 (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                 (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                 (48 . ".\\(?:x[a-zA-Z]\\)")
                 (58 . ".\\(?:::\\|[:=]\\)")
                 (59 . ".\\(?:;;\\|;\\)")
                 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                 (91 . ".\\(?:]\\)")
                 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                 (94 . ".\\(?:=\\)")
                 (119 . ".\\(?:ww\\)")
                 (123 . ".\\(?:-\\)")
                 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
                 )
               ))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

** Line settings

Highlight the current line.

#+BEGIN_SRC emacs-lisp
  (when window-system
        (global-hl-line-mode))
#+END_SRC

Never lose my cursor again.

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :defer t
    :diminish beacon-mode
    :init
    (beacon-mode 1))
#+END_SRC

Show fringe indicators as curly arrows.

#+BEGIN_SRC emacs-lisp
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

Indicate empty lines.

#+BEGIN_SRC emacs-lisp
  (setq-default indicate-empty-lines t)
#+END_SRC

* Programming Environments
** General settings

Add =homebrew= to Emacs path.

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC

Write backup files to their own directory, even if they are in version control.

Source: [[http://whattheemacsd.com/init.el-02.html][What the .emacs.d]]


#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))

  (setq vc-make-backup-files t)
#+END_SRC

Use UTF-8 encoding everywhere.

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

Indent by two spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
#+END_SRC

Automatically indent with the return key.

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

Show parenthesis highlighting.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Change the color of delimiters in programming modes.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

Add column numbers to the bottom bar.

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC

Follow symlinks.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

Use =dumb-jump= to jump to definition in source code.

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure
    :bind
    (("M-g o" . dumb-jump-go-to-other-window)
     ("M-g d" . dumb-jump-go)
     ("M-g p" . dumb-jump-back)
     ("M-g q" . dumb-jump-quick-look)
     ("M-g i" . dumb-jump-go-prompt))
    :config
    (dumb-jump-mode)
    (setq dumb-jump-selector 'helm))
#+END_SRC

** Magit

Bring up the status menu with =C-x g=.

Use =evil= keybindings.

Highlight commit text in the summary that goes over 50 characters.

Enable spellchecking when writing commit messages.

Start in insert mode when writing a commit message.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    (use-package evil-magit)
    (setq git-commit-summary-max-length 50)
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC

** Auto-complete

Use =company= for auto-completion engine.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :bind (:map company-active-map
                ("M-j" . company-select-next)
                ("M-k" . company-select-previous))
    :init
    (global-company-mode t))
#+END_SRC

** Clojure(script)

Use CIDER as the "IDE".

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :defer t)
#+END_SRC

Also use inferior Clojure.

#+BEGIN_SRC emacs-lisp
  (use-package inf-clojure
    :commands (inf-clojure))
#+END_SRC

Run a ClojureScript REPL with Leiningen with =M-x cljs-node-repl RET=.

#+BEGIN_SRC emacs-lisp
  (defun cljs-node-repl ()
    (interactive)
    (run-clojure "lein trampoline run -m clojure.main repl.clj"))
#+END_SRC

Recognize .boot files as valid Clojure code.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.boot\\'" . clojure-mode))
#+END_SRC

** Dafny

First, install the =boogie-friends= package.
Indicate the paths to the Dafny and Boogie installations.

#+BEGIN_SRC emacs-lisp
  (setq dafny-verification-backend 'server)
  (setq flycheck-dafny-executable "/Users/samarth/dafny/dafny")
  (setq flycheck-boogie-executable "/Users/samarth/dafny/dafny-server")
  (setq flycheck-z3-smt2-executable "/Users/samarth/dafny/z3/bin/z3")
  (setq flycheck-inferior-dafny-executable "/Users/samarth/dafny/dafny-server") ;; Optional
  ;; (setq boogie-friends-profile-analyzer-executable "PATH-TO-Z3-AXIOM-PROFILER") ;; Optional
#+END_SRC

** JavaScript

Use =js2-mode= to get some nice JavaScript IDE features.
Make sure =eslint= is configured within the project root by running =eslint --init=, otherwise Flycheck will not work.

Source: [[https://github.com/CSRaghunandan/.emacs.d/blob/master/setup-files/setup-js.el][more dotfiles]] and also [[http://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][this blog post]]

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode ("\\.js" . js2-mode)
    :interpreter ("node" . js2-mode)
    :config
    (setq js-basic-indent 2)
    (setq-default js2-basic-indent 2
                  js2-basic-offset 2
                  js2-auto-indent-p t
                  js2-cleanup-whitespace t
                  js2-enter-indents-newline t
                  js2-indent-on-enter-key t)
    (setq flycheck-javascript-eslint-executable "eslint")
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint)))
    ;; turn off all warnings in js2-mode because flycheck + eslint will handle them
    (setq js2-mode-show-parse-errors t
          js2-mode-show-strict-warnings nil
          js2-strict-missing-semi-warning nil)
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
    (add-hook 'js2-mode-hook
              (lambda ()
                (flycheck-mode)
                (flycheck-select-checker "javascript-eslint"))))
#+END_SRC

Use =js2-refactor= for obvious reasons.

#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :after js2-mode
    :hook ((js2-mode . js2-refactor-mode))
    :config
    ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref
    (define-key js-mode-map (kbd "M-.") nil)
    (js2r-add-keybindings-with-prefix "C-c C-r")

    ;; xref-js2 supports things like jump to definition using ag instead of tags
    (use-package xref-js2
      :ensure t
      :after js2-mode)

    (add-hook 'js2-mode-hook (lambda ()
                               (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
#+END_SRC

Use the =Tern= JavaScript analyzer.

Source: [[https://github.com/howardabrams/dot-files/blob/master/emacs-javascript.org][howardabrams' dotfiles]]

#+BEGIN_SRC emacs-lisp
  (use-package tern
    :ensure t
    :after js2-mode
    :init
    (add-hook 'js2-mode-hook (lambda () (tern-mode)))
    :config
    (define-key tern-mode-keymap (kbd "M-.") nil)
    (define-key tern-mode-keymap (kbd "M-,") nil)
    (use-package company-tern
      :ensure t
      :init (add-to-list 'company-backends 'company-tern)))
#+END_SRC

Use =prettier-js= for code formatting. Make sure =prettier= is installed globally.

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :after js2-mode
    :hook ((js2-mode . prettier-js-mode)))
#+END_SRC

** Lisps

Enable =paredit=.

#+BEGIN_SRC emacs-lisp
  ;; (use-package paredit
  ;;   :ensure t
  ;;   :commands (enable-paredit-mode paredit-mode)
  ;;   :diminish paredit-mode
  ;;   :init
  ;;   (add-hook 'clojure-mode-hook #'paredit-mode)
  ;;   (add-hook 'cider-mode-hook #'paredit-mode))
#+END_SRC

Use =evil-paredit= for =paredit= to work nicely with =evil-mode=.

#+BEGIN_SRC emacs-lisp
  ;; (use-package evil-paredit
  ;;   :ensure t
  ;;   :commands (evil-paredit-mode))
#+END_SRC

Use =smartparens= and =evil-smartparens=.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish
    :init
    (smartparens-global-mode 1))

  (use-package evil-smartparens
    :ensure t
    :diminish
    :config
    (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+END_SRC

** Python

Use the Microsoft Language Server Protocol for Python development.

Source: this [[https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/][blog post]]

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :config
    ;; make sure we have lsp-imenu everywhere we have LSP
    (require 'lsp-imenu)
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
    ;; get lsp-python-enable defined
    ;; NB: use either projectile-project-root or ffip-get-project-root-directory
    ;;     or any other function that can be used to find the root directory of a project
    (lsp-define-stdio-client lsp-python "python"
                             #'projectile-project-root
                             '("pyls"))

    ;; make sure this is activated when python-mode is activated
    ;; lsp-python-enable is created by macro above
    (add-hook 'python-mode-hook
              (lambda ()
                (lsp-python-enable)))

    ;; lsp extras
    (use-package lsp-ui
      :ensure t
      :config
      (setq lsp-ui-sideline-ignore-duplicate t)
      (add-hook 'lsp-mode-hook 'lsp-ui-mode))

    (use-package company-lsp
      :config
      (push 'company-lsp company-backends))

    ;; format file on save
    (add-hook 'before-save-hook 'lsp-format-buffer))
#+END_SRC

Use =pipenv= to set up Python environments and replace =pip3=.

#+BEGIN_SRC emacs-lisp
  ;; (use-package pipenv
  ;;   :hook (python-mode . pipenv-mode)
  ;;   :init
  ;;   (setq pipenv-projectile-after-switch-function #'pipenv-projectile-after-switch-extended))
#+END_SRC

Use =pyvenv= for virtual environments. This package has to be enabled for =lsp-mode= to work.

#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :commands
    (pyvenv-activate pyvenv-workon))
#+END_SRC

When running python files with =M-x run-python=, make sure the shell is set to Python3.

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "ipython")
#+END_SRC

* Org-mode
** General Settings

Use bullets instead of asterisks.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

Use a little downward-pointing arrow instead of the usual ellipsis that org displays when there’s stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Enable spellchecking in org-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

Don't change the font height of headers.

#+BEGIN_SRC emacs-lisp
  (defun my/org-mode-hook ()
    (dolist (face '(org-level-1
                    org-level-2
                    org-level-3
                    org-level-4
                    org-level-5))
      (set-face-attribute face nil :weight 'semi-bold :height 1.1)))

  (add-hook 'org-mode-hook 'my/org-mode-hook)
  (setq solarized-scale-org-headlines nil)
#+END_SRC

Don't use variable pitch in the solarized color-scheme.

#+BEGIN_SRC emacs-lisp
  (setq solarized-use-variable-pitch nil)
#+END_SRC

** Task Management

Store org files in Dropbox.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org/")
#+END_SRC

Setup the global TODO list.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-agenda-show-log t)
#+END_SRC

Record the time a TODO was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Create a function to go to my tasks.org file. Called with =M-x RET tasks RET=.
Source: [[https://github.com/munen/emacs.d/#general-configuration]]

#+BEGIN_SRC emacs-lisp
  (defun set-org-agenda-files ()
    "Set different org-files to be used in org-agenda"
    (setq org-agenda-files (list (concat org-directory "tasks.org")
                                 (concat org-directory "refile-beorg.org"))))

  (set-org-agenda-files)

  (defun tasks ()
    "Open main 'org-mode' file and start 'org-agenda' for this week."
    (interactive)
    (find-file (concat org-directory "tasks.org"))
    (set-org-agenda-files)
    (org-agenda-list)
    (org-agenda-week-view)
    (shrink-window-if-larger-than-buffer)
    (other-window 1))
#+END_SRC

** Capture

Set up capture.

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/tasks.org"))
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC

** Evil mode bindings

Use evil mode keybindings in org-mode.

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :diminish evil-org-mode
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

** Exporting

Change straight quotes to curly quotes when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

Don’t include a footer with my contact and publishing information at the bottom of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

Set the Emacs browser to the default MacOS browser.

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-default-macosx-browser)
#+END_SRC

Produce pdfs with syntax highlighting with =minted=.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

** PDFs

Use =pdftools= to view PDF files.

Found this [[https://github.com/politza/pdf-tools/issues/18#issuecomment-304429580][GitHub issue]] that uses bookmarks to remember location in PDFs.

#+BEGIN_SRC emacs-lisp
  (use-package tablist
    :ensure t)

  (use-package pdf-tools
    :pin manual
    :magic ("%PDF" . pdf-view-mode)
    :init
    (pdf-tools-install)
    :config
    (setq pdf-view-display-size 'fit-width
          pdf-view-use-scaling t
          pdf-view-resize-factor 1.25)
    (setq pdf-annot-activate-created-annotations t)

    (defun my/pdf-set-last-viewed-bookmark ()
      (interactive)
      (when (eq major-mode 'pdf-view-mode)
        (bookmark-set (my/pdf-generate-bookmark-name))))

    (defun my/pdf-jump-last-viewed-bookmark ()
      (bookmark-set "fake")
      (when
          (my/pdf-has-last-viewed-bookmark)
        (bookmark-jump (my/pdf-generate-bookmark-name))))

    (defun my/pdf-has-last-viewed-bookmark ()
      (assoc
       (my/pdf-generate-bookmark-name) bookmark-alist))

    (defun my/pdf-generate-bookmark-name ()
      (concat "PDF-LAST-VIEWED: " (buffer-file-name)))

    (defun my/pdf-set-all-last-viewed-bookmarks ()
      (dolist (buf (buffer-list))
        (with-current-buffer (and (buffer-name buf) buf)
          (my/pdf-set-last-viewed-bookmark))))

    (add-hook 'kill-buffer-hook 'my/pdf-set-last-viewed-bookmark)
    (add-hook 'pdf-view-mode-hook 'my/pdf-jump-last-viewed-bookmark)
    (unless noninteractive  ; as `save-place-mode' does
      (add-hook 'kill-emacs-hook #'my/pdf-set-all-last-viewed-bookmarks)))
#+END_SRC

Use =org-pdfview= to integrate =pdf-tools= with org-mode.

Source: [[https://github.com/stardiviner/emacs.d/blob/199597132ef58ff6b260f6d6c3f1283bd7f2085a/init/Emacs/init-emacs-pdf.el][this GitHub repo]]

#+BEGIN_SRC emacs-lisp
  (use-package org-pdfview
    :ensure t
    :init
    (org-link-set-parameters "pdfview" :export #'org-pdfview-export)
    (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
    (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" . (lambda (file link) (org-pdfview-open link)))))
#+END_SRC

* Helm

Use Helm for incremental completions and narrowing selections.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :init
    (helm-mode 1)
    (add-hook 'helm-major-mode-hook
            (lambda ()
              (setq auto-composition-mode nil))))
#+END_SRC

* Prose
** Linting

Use =proselint=.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish
    :config
    (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message (one-or-more not-newline)
                         (zero-or-more "\n" (any " ") (one-or-more not-newline)))
                line-end))
      :modes (text-mode markdown-mode gfm-mode org-mode))
      (add-to-list 'flycheck-checkers 'proselint))
#+END_SRC

Use =flycheck= in the appropriate buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook #'flycheck-mode)
  (add-hook 'gfm-mode-hook #'flycheck-mode)
  (add-hook 'text-mode-hook #'flycheck-mode)
  (add-hook 'org-mode-hook #'flycheck-mode)
#+END_SRC

Set spell checker to =aspell=.

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "/usr/local/bin/aspell")
#+END_SRC

** Thesaurus

Use =synosaurus= as a nice interface to =wordnet=. I installed =wordnet= with =brew install wordnet=.
The default bindings conflict with =org-mode= so I had to change them.

#+BEGIN_SRC emacs-lisp
  (use-package synosaurus
    :ensure t
    :bind
    (("C-c C-h l" . synosaurus-lookup)
     ("C-c C-h r" . synosaurus-choose-and-replace))
    :config
    (setq synosaurus-backend 'synosaurus-backend-wordnet)
    (setq synosaurus-choose-method 'default))
#+END_SRC

** Typography

Use =typo-mode= to easily type typographical symbols such as the em-dash.

#+BEGIN_SRC emacs-lisp
  (use-package typo
    :defer t
    :diminish
    :config
    (typo-global-mode 1)
    (add-hook 'text-mode-hook 'typo-mode))
#+END_SRC

* Editing Settings
** Visit Emacs configuration

Bind C-c e to open Emacs configuration file.

#+BEGIN_SRC emacs-lisp
  (defun visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'visit-emacs-config)
#+END_SRC

** Reload Emacs configuration

#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/configuration.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/configuration.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Save location within a file

If I close the file and open it later, I will return to the place I left off.

#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+END_SRC
** Auto revert files on change

When something changes a file, automatically refresh the buffer containing that file so they can’t get out of sync.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Always indent with spaces

No explanation needed.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Code folding

Enable code folding for programming modes.

=zc= Fold
=za= Unfold
=zR= Unfold everything

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC

** Use =projectile= everywhere

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :init
      (projectile-mode 1))
#+END_SRC
** Smooth scrolling

Makes scrolling a whole lot nicer.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Command completion

Use =which-key= to offer suggestions for completing a command.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
      (which-key-mode))
#+END_SRC
** Undo tree

Use =undo-tree= for better undo history.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

** Whitespace

Delete trailing whitespace after saving in all modes except markdown-mode and org-mode.
Markdown uses two trailing blanks to signal a line break.
Source: [[https://github.com/munen/emacs.d/#delete-trailing-whitespace]]

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook '(lambda ()
                                (when (not (or (derived-mode-p 'markdown-mode)
                                               (derived-mode-p 'org-mode))
                                  (delete-trailing-whitespace)))))
#+END_SRC

** Random useful keybindings

Join the following line onto the current line with =M-j=.

Source: [[http://whattheemacsd.com/key-bindings.el-03.html][What the emacs.d]]

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-j")
              (lambda ()
                    (interactive)
                    (join-line -1)))
#+END_SRC

* Email
** Use =mu4e=
   
[[https://notanumber.io/2016-10-03/better-email-with-mu4e/][This post]] was super helpful for setting everything up.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  (require 'mu4e)

  (setq mu4e-maildir (expand-file-name "~/Maildir"))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-change-filenames-when-moving t) ;; fix for mbsync
  ;; Enable inline images.
  (setq mu4e-view-show-images t)
  (setq mu4e-view-image-max-width 800)
  ;; Use imagemagick, if available.
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
#+END_SRC

Show email addresses as well as names.

#+BEGIN_SRC emacs-lisp
  (setq mu4e-view-show-addresses t)
#+END_SRC

Open email in a browser if necessary.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser) t)
#+END_SRC

Enable images in w3m.

Source: [[https://emacs.stackexchange.com/questions/41691/mu4e-display-inline-images-in-html-emails][Emacs StackExchange]]

#+BEGIN_SRC emacs-lisp
  (setq w3m-default-desplay-inline-images t)
  (defun mu4e-action-view-in-w3m ()
    "View the body of the message in emacs w3m."
    (interactive)
    (w3m-browse-url (concat "file://"
                            (mu4e~write-body-to-html (mu4e-message-at-point t)))))
#+END_SRC

This hook correctly modifies the \Inbox and \Starred flags on email when they are marked to trigger the appropriate Gmail actions.

#+BEGIN_SRC emacs-lisp
  (add-hook 'mu4e-mark-execute-pre-hook
            (lambda (mark msg)
              (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
                    ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
                    ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))
#+END_SRC

Define helper functions.

#+BEGIN_SRC emacs-lisp
  (defun mu4e-message-maildir-matches (msg rx)
    "Determine which account context I am in based on the maildir subfolder"
    (when rx
      (if (listp rx)
          ;; If rx is a list, try each one for a match
          (or (mu4e-message-maildir-matches msg (car rx))
              (mu4e-message-maildir-matches msg (cdr rx)))
        ;; Not a list, check rx
        (string-match rx (mu4e-message-field msg :maildir)))))

  (defun choose-msmtp-account ()
    "Choose account label to feed msmtp -a option based on From header
    in Message buffer; This function must be added to
    message-send-mail-hook for on-the-fly change of From address before
    sending message since message-send-mail-hook is processed right
    before sending message."
    (if (message-mail-p)
        (save-excursion
          (let*
              ((from (save-restriction
                       (message-narrow-to-headers)
                       (message-fetch-field "from")))
               (account
                (cond
                 ((string-match "samarthkishor1@gmail.com" from) "gmail")
                 ((string-match "sk4gz@virginia.edu" from) "uva"))))
            (setq message-sendmail-extra-arguments (list '"-a" account))))))
#+END_SRC

Use spellcheck when composing an email.

#+BEGIN_SRC emacs-lisp
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
#+END_SRC

Define email contexts for my personal and school accounts.

#+BEGIN_SRC emacs-lisp
  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "gmail"
             :enter-func (lambda () (mu4e-message "Switch to the gmail context"))
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-maildir-matches msg "^/gmail")))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '((user-mail-address     . "samarthkishor1@gmail.com")
                     (user-full-name        . "Samarth Kishor")
                     (mu4e-sent-folder      . "/gmail/sent")
                     (mu4e-drafts-folder    . "/gmail/drafts")
                     (mu4e-trash-folder     . "/gmail/trash")
                     (mu4e-refile-folder    . "/gmail/[Gmail].All Mail")))
           ,(make-mu4e-context
             :name "uva"
             :enter-func (lambda () (mu4e-message "Switch to the UVA context"))
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-maildir-matches msg "^/uva")))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '((user-mail-address     . "sk4gz@virginia.edu")
                     (user-full-name        . "Samarth Kishor")
                     (mu4e-sent-folder      . "/uva/sent")
                     (mu4e-drafts-folder    . "/uva/drafts")
                     (mu4e-trash-folder     . "/uva/trash")
                     (mu4e-refile-folder    . "/uva/[Gmail].All Mail")))))
#+END_SRC

=mu4e= freezes in header mode sometimes because of font ligatures. This should fix that.

Source: [[https://github.com/tonsky/FiraCode/issues/158][Fira Code Github issues]]

#+BEGIN_SRC emacs-lisp
  (add-hook 'mu4e-headers-mode-hook
            (lambda ()
              (setq-local auto-composition-mode nil)))
#+END_SRC

Gmail already sends sent mail to the Sent folder.

#+BEGIN_SRC emacs-lisp
  (setq mu4e-sent-messages-behavior 'delete)
#+END_SRC

View and compose email in =visual-line-mode= and use the =visual-fill-column= package to have soft-wrapped lines.

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :ensure t)

  (add-hook 'mu4e-view-mode-hook #'visual-line-mode) 
  (add-hook 'mu4e-compose-mode-hook
            (lambda ()
              (set-fill-column 80)
              (auto-fill-mode 0)
              (visual-fill-column-mode)
              (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
              (visual-line-mode)))
#+END_SRC

** Send mail with =msmtp=

#+BEGIN_SRC emacs-lisp
  (setq message-send-mail-function 'message-send-mail-with-sendmail)
  (setq sendmail-program "/usr/local/bin/msmtp")
  (setq user-full-name "Samarth Kishor")

  ; tell msmtp to choose the SMTP server according to the "from" field in the outgoing email
  (setq message-sendmail-envelope-from 'header)
  (add-hook 'message-send-mail-hook 'choose-msmtp-account)
  ;; (setq message-sendmail-f-is-evil 't)
#+END_SRC

** Integrate with org-mode

Use =org-mu4e= to store org-mode links to emails. Store a link to the message if in the header view.
Convert the message to HTML if composed in org-mode with =org-mu4e-compose-org-mode=.

Source: [[http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/][Pragmatic Emacs]]

#+BEGIN_SRC emacs-lisp
  (require 'org-mu4e)
  (setq org-mu4e-link-query-in-headers-mode nil)
  (setq org-mu4e-convert-to-html t)
#+END_SRC

Update the org-mode capture template to work with emails.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        `(("t" "TODO" entry (file+headline "~/Dropbox/org/tasks.org" "Tasks")
           "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))
#+END_SRC

