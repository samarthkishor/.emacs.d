#+TITLE: Emacs Configuration
#+AUTHOR: Samarth Kishor
#+OPTIONS: toc:nil num:nil

* Use =use-package=

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)

(eval-when-compile
    (require 'use-package))
#+END_SRC

* Personal Information

Name and email.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Samarth Kishor"
      user-mail-address "samarthkishor1@gmail.com")
#+END_SRC

* =evil-mode=

Don't expand abbreviations when I hit escape.

#+BEGIN_SRC emacs-lisp
(setq evil-want-abbrev-expand-on-insert-exit nil)
#+END_SRC

Use =evil=.

#+BEGIN_SRC emacs-lisp
(evil-mode 1)
#+END_SRC

Bind =C-p= to fuzzy-finding files in the current project.

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
#+END_SRC

Scroll by visual line.

#+BEGIN_SRC emacs-lisp
(evil-define-key nil evil-normal-state-map
  "j" 'evil-next-visual-line
  "k" 'evil-previous-visual-line)
#+END_SRC

* UI Preferences
** Tweak window settings

Hide the scroll, tool, and menu bars.

#+BEGIN_SRC emacs-lisp
(if window-system (scroll-bar-mode -1))
(tool-bar-mode 0)
(menu-bar-mode 0)
#+END_SRC

Start in full-screen.

#+BEGIN_SRC emacs-lisp
(if (eq window-system 'ns)
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

Set the theme as a "safe theme".

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC

** Mode line

Use =telephone-line=.

#+BEGIN_SRC emacs-lisp
  (require 'telephone-line)
  (setq telephone-line-lhs
        '((evil   . (telephone-line-evil-tag-segment))
          (accent . (telephone-line-vc-segment
                     telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment))
          (nil    . (telephone-line-minor-mode-segment
                     telephone-line-buffer-segment))))
  (setq telephone-line-rhs
        '((nil    . (telephone-line-misc-info-segment))
          (accent . (telephone-line-major-mode-segment
                     telephone-line-flycheck-segment))
          (evil   . (telephone-line-airline-position-segment))))
  (telephone-line-mode t)
#+END_SRC

Get rid of clutter using =diminish=.

#+BEGIN_SRC emacs-lisp
  (use-package diminish
      :ensure t
      :init
      (diminish 'undo-tree-mode)
      (diminish 'flyspell-mode))
#+END_SRC

Don't display the system load average.

#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil)
#+END_SRC

Use =fancy-battery=.

#+BEGIN_SRC emacs-lisp
  ;; (use-package fancy-battery
  ;;   :ensure t
  ;;   :config
  ;;     (setq fancy-battery-show-percentage t)
  ;;     (setq battery-update-interval 15)
  ;;     (if window-system
  ;;       (fancy-battery-mode)
  ;;       (display-battery-mode)))
#+END_SRC

** Use fancy symbols

#+BEGIN_SRC emacs-lisp
  (when window-system
        (use-package pretty-mode
        :ensure t
        :config
        (global-pretty-mode t)))
#+END_SRC

** Use a visible bell instead

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

** Set the font to Fira Code

It's the best.

#+BEGIN_SRC emacs-lisp
(when (window-system)
  (set-frame-font "Fira Code 14" nil t))
#+END_SRC

Enable ligatures.

#+BEGIN_SRC emacs-lisp
(let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
               (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
               (36 . ".\\(?:>\\)")
               (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
               (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
               (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
               (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
               (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
               (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
               (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
               (48 . ".\\(?:x[a-zA-Z]\\)")
               (58 . ".\\(?:::\\|[:=]\\)")
               (59 . ".\\(?:;;\\|;\\)")
               (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
               (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
               (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
               (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
               (91 . ".\\(?:]\\)")
               (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
               (94 . ".\\(?:=\\)")
               (119 . ".\\(?:ww\\)")
               (123 . ".\\(?:-\\)")
               (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
               (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
               )
             ))
  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

** Line settings

Highlight the current line.

#+BEGIN_SRC emacs-lisp
(when window-system
      (global-hl-line-mode))
#+END_SRC

Show fringe indicators as curly arrows.

#+BEGIN_SRC emacs-lisp
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

Indicate empty lines.

#+BEGIN_SRC emacs-lisp
(setq-default indicate-empty-lines t)
#+END_SRC

* Programming Environments
** General settings

Add =homebrew= to Emacs path.

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC

Don't use backup files.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

Use UTF-8 encoding everywhere.

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+END_SRC

Indent by two spaces.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
#+END_SRC

Show parenthesis highlighting.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

Add column numbers to the bottom bar.

#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC

Follow symlinks.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

** Magit

Bring up the status menu with =C-x g=.

Use =evil= keybindings.

Highlight commit text in the summary that goes over 50 characters.

Enable spellchecking when writing commit messages.

Start in insert mode when writing a commit message.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    (use-package evil-magit)
    (setq git-commit-summary-max-length 50)
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC

* Org-mode
** Display Preferences

Use bullets instead of asterisks.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :init
  (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

Use a little downward-pointing arrow instead of the usual ellipsis that org displays when there’s stuff under a header.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode.

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

Enable spellchecking in org-mode.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

Don't change the font height of headers.

#+BEGIN_SRC emacs-lisp
(defun my/org-mode-hook ()
  (dolist (face '(org-level-1
                  org-level-2
                  org-level-3
                  org-level-4
                  org-level-5))
    (set-face-attribute face nil :weight 'semi-bold :height 1.2)))

(add-hook 'org-mode-hook 'my/org-mode-hook)
#+END_SRC

** Task Management

Store org files in Dropbox.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
#+END_SRC

Setup the global TODO list.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list "~/Dropbox/org/todo.org"
                             "~/Dropbox/org/beorg-local.org"))
#+END_SRC

Record the time a TODO was archived.

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

** Exporting

Change straight quotes to curly quotes when exporting.

#+BEGIN_SRC emacs-lisp
(setq org-export-with-smart-quotes t)
#+END_SRC

Don’t include a footer with my contact and publishing information at the bottom of every exported HTML document.

#+BEGIN_SRC emacs-lisp
(setq org-html-postamble nil)
#+END_SRC

Use Firefox when exporting to HTML.

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")

(setenv "BROWSER" "firefox")
#+END_SRC

Produce pdfs with syntax highlighting with =minted=.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
#+END_SRC

* Helm

Use Helm for incremental completions and narrowing selections.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :init
    (helm-mode 1))
#+END_SRC

* Prose
** Linting

Use =proselint=.

#+BEGIN_SRC emacs-lisp
(require 'flycheck)

(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
            (id (one-or-more (not (any " "))))
            (message (one-or-more not-newline)
                     (zero-or-more "\n" (any " ") (one-or-more not-newline)))
            line-end))
  :modes (text-mode markdown-mode gfm-mode org-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

Use flycheck in the appropriate buffer.

#+BEGIN_SRC emacs-lisp
(add-hook 'markdown-mode-hook #'flycheck-mode)
(add-hook 'gfm-mode-hook #'flycheck-mode)
(add-hook 'text-mode-hook #'flycheck-mode)
(add-hook 'org-mode-hook #'flycheck-mode)
#+END_SRC

Diminish =flycheck=.

#+BEGIN_SRC emacs-lisp
  (diminish 'flycheck-mode)
#+END_SRC

Set spell checker to =aspell=.

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "/usr/local/bin/aspell")
#+END_SRC

* Editing Settings
** Visit Emacs configuration

Bind C-c e to open Emacs configuration file.

#+BEGIN_SRC emacs-lisp
(defun visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/configuration.org"))

(global-set-key (kbd "C-c e") 'visit-emacs-config)
#+END_SRC

** Reload Emacs configuration

#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/configuration.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/configuration.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Save location within a file

If I close the file and open it later, I will return to the place I left off.

#+BEGIN_SRC emacs-lisp
(save-place-mode t)
#+END_SRC

** Always indent with spaces

No explanation needed.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** Use =projectile= everywhere

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :init
      (projectile-mode 1))
#+END_SRC
** Smooth scrolling

Makes scrolling a whole lot nicer.

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
** Command completion

Use =which-key= to offer suggestions for completing a command.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
      (which-key-mode))
#+END_SRC
** Whitespace

Delete trailing whitespace after saving.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
